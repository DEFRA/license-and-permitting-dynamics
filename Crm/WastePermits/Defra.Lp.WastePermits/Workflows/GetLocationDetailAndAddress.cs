
// <copyright file="GetLocationDetailAndAddress.cs" company="">
// Copyright (c) 2019 All Rights Reserved
// </copyright>
// <author></author>
// <date>6/26/2019 12:25:30 PM</date>
// <summary>Implements the GetLocationDetailAndAddress Plugin.</summary>
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.1
// </auto-generated>
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Globalization;
using System.Linq;
using System.Text;
using System.ServiceModel;
using System.Threading.Tasks;
using System.Activities;
using Microsoft.Xrm.Sdk;
using Microsoft.Xrm.Sdk.Workflow;
using System.Runtime.Serialization;
using WastePermits.Model.EarlyBound;
using Microsoft.Xrm.Sdk.Query;

namespace Defra.Lp.WastePermits.Workflows
{


    /// </summary>    
    public class GetLocationDetailAndAddress: WorkFlowActivityBase
    {


        #region Properties 
        //Property for Entity defra_application
        [Input("Location")]
        [ReferenceTarget("defra_location")]
        public InArgument<EntityReference> GetLocation { get; set; }



        [Output("Locaion Detail")]
        [ReferenceTarget("defra_locationdetails")]
        public OutArgument<EntityReference> GetLocationDetail { get; set; }

        [Output("defra_address")]
        [ReferenceTarget("defra_address")]
        public OutArgument<EntityReference> GetLocationDetailAddress { get; set; }


        #endregion

        /// </remarks>
        public override void ExecuteCRMWorkFlowActivity(CodeActivityContext executionContext, LocalWorkflowContext crmWorkflowContext)
        {

            var locationDetailEnt = new EntityReference(defra_locationdetails.EntityLogicalName, Guid.NewGuid());
            var addressEnt = new EntityReference(defra_address.EntityLogicalName, Guid.NewGuid());


            if (crmWorkflowContext == null)
            {
                throw new ArgumentNullException("crmWorkflowContext");
            }

            var tracingService = executionContext.GetExtension<ITracingService>();
            var service = crmWorkflowContext.OrganizationService;
            var context = crmWorkflowContext.WorkflowExecutionContext;

            var locationId = GetLocation.Get(executionContext).Id;
            var locationdeatilId = Guid.Empty;
            var addressId = Guid.Empty;

            var locationDetailFetch = string.Format(@"<fetch >
                  <entity name='defra_locationdetails'>
                    <attribute name='defra_locationdetailsid' />
    
                    <filter type='and'>
                      <condition attribute='defra_locationid' operator='eq' uiname='My Main Site' uitype='defra_location' value='{0}' />
                    </filter>
                  </entity>
                </fetch>", locationId.ToString());

            tracingService.Trace(locationDetailFetch);

            tracingService.Trace("try to run RetrieveMultiple on locationDetailFetch");
            var l = service.RetrieveMultiple(new FetchExpression(locationDetailFetch)).Entities.FirstOrDefault();
            if (l != null)
            {

                locationDetailEnt = new EntityReference(defra_locationdetails.EntityLogicalName,l.Id);

                var addressFetch = string.Format(@"<fetch version='1.0' output-format='xml-platform' mapping='logical' distinct='true'>
                  <entity name='defra_address'>
                    <attribute name='defra_addressid' />
    
                    <link-entity name='defra_locationdetails' from='defra_addressid' to='defra_addressid' link-type='inner' alias='aa'>
                      <filter type='and'>
                        <condition attribute='defra_locationdetailsid' operator='eq'  uitype='defra_locationdetails' value='{0}' />
                      </filter>
                    </link-entity>
                  </entity>
                </fetch>", l.Id.ToString());

                tracingService.Trace(addressFetch);

                tracingService.Trace("try to run RetrieveMultiple on addressFetch");
                var a = service.RetrieveMultiple(new FetchExpression(addressFetch)).Entities.FirstOrDefault();
                if (a != null)
                {
                    addressEnt = new EntityReference("defra_address.EntityLogicalName",a.Id);
                }
            }
            GetLocationDetail.Set(executionContext, locationDetailEnt);
            GetLocationDetailAddress.Set(executionContext, addressEnt);
            //throw new Exception("ok");
        }


    }

}
