
// <copyright file="GetPermitDetailsForApplication.cs" company="">
// Copyright (c) 2018 All Rights Reserved
// </copyright>
// <author></author>
// <date>3/5/2018 8:36:50 AM</date>
// <summary>Implements the GetPermitDetailsForApplication Plugin.</summary>
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.1
// </auto-generated>
using System;
using System.ServiceModel;
using System.Activities;
using Microsoft.Xrm.Sdk;
using Microsoft.Xrm.Sdk.Workflow;
using Defra.Lp.Common;

namespace Defra.Lp.WastePermits.Workflows
{


    /// </summary>    
    public class GetPermitDetailsForApplication: WorkFlowActivityBase
    {
        #region Properties 
        //Property for Entity defra_application
        [RequiredArgument]
        [Input("Application")]
        [ReferenceTarget("defra_application")]
        public InArgument<EntityReference> Application { get; set; }

        [Output("Return data")]
        public OutArgument<string> ReturnData { get; set; }

        private ITracingService TracingService { get; set; }
        private IWorkflowContext Context { get; set; }
        private IOrganizationService Service { get; set; }
        #endregion

        /// <summary>
        /// Executes the WorkFlow.
        /// </summary>
        /// <param name="crmWorkflowContext">The <see cref="LocalWorkflowContext"/> which contains the
        /// <param name="executionContext" > <see cref="CodeActivityContext"/>
        /// </param>       
        /// <remarks>
        /// For improved performance, Microsoft Dynamics 365 caches WorkFlow instances.
        /// The WorkFlow's Execute method should be written to be stateless as the constructor
        /// is not called for every invocation of the WorkFlow. Also, multiple system threads
        /// could execute the WorkFlow at the same time. All per invocation state information
        /// is stored in the context. This means that you should not use global variables in WorkFlows.
        /// </remarks>
        public override void ExecuteCRMWorkFlowActivity(CodeActivityContext executionContext, LocalWorkflowContext crmWorkflowContext)
        {

            if (crmWorkflowContext == null)
            {
                throw new ArgumentNullException("crmWorkflowContext");
            }

            TracingService = executionContext.GetExtension<ITracingService>();
            Service = crmWorkflowContext.OrganizationService;
            Context = crmWorkflowContext.WorkflowExecutionContext;

            var application = this.Application.Get(executionContext);
            if (application == null) return;

            TracingService.Trace("Getting Standard Rules for application: {0}", application.Id.ToString());

            string returnData = GetStandardRules(application);               
            ReturnData.Set(executionContext, returnData);
            TracingService.Trace("Returning data: {0}", returnData);

        }

        private string GetStandardRules(EntityReference application)
        {
            var returnData = string.Empty;
            var fetchXml = string.Format(@"<fetch top='50' >
                                                  <entity name='defra_application' >
                                                    <filter>
                                                      <condition attribute='defra_applicationid' operator='eq' value='{0}' />
                                                    </filter>
                                                    <link-entity name='defra_applicationline' from='defra_applicationid' to='defra_applicationid' >
                                                      <filter>
                                                        <condition attribute='defra_permittype' operator='eq' value='910400000' />
                                                      </filter>
                                                      <link-entity name='defra_standardrule' from='defra_standardruleid' to='defra_standardruleid' alias='permit' >
                                                        <attribute name='defra_name' />
                                                        <attribute name='defra_rulesnamegovuk' />
                                                      </link-entity>
                                                    </link-entity>
                                                  </entity>
                                                </fetch>", application.Id.ToString());
            var results = Query.QueryCRMForMultipleRecords(Service, fetchXml);
            if (results != null && results.Entities.Count > 0)
            {
                for (int i = 0; i < results.Entities.Count; i++)
                {
                    var code = string.Empty;
                    var name = string.Empty;
                    if (results.Entities[i].Contains("permit.defra_name"))
                    {
                        code = (string)results.Entities[i].GetAttributeValue<AliasedValue>("permit.defra_name").Value;
                    }
                    if (results.Entities[i].Contains("permit.defra_rulesnamegovuk"))
                    {
                        name = (string)results.Entities[i].GetAttributeValue<AliasedValue>("permit.defra_rulesnamegovuk").Value;
                    }
                    var permit = string.Format("{0} - {1}", code, name);
                    returnData = (i == 0) ? returnData + permit : returnData + "; " + permit;
                }
            }
            else
            {
                returnData = string.Empty;
            }

            return returnData;
        }
    }
}