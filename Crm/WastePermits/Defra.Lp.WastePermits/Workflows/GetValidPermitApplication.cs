
// <copyright file="GetValidPermitApplication.cs" company="">
// Copyright (c) 2019 All Rights Reserved
// </copyright>
// <author></author>
// <date>8/19/2019 2:13:17 PM</date>
// <summary>Implements the GetValidPermitApplication Plugin.</summary>
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.1
// </auto-generated>
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Globalization;
using System.Linq;
using System.Text;
using System.ServiceModel;
using System.Threading.Tasks;
using System.Activities;
using Microsoft.Xrm.Sdk;
using Microsoft.Xrm.Sdk.Workflow;
using System.Runtime.Serialization;
using Microsoft.Xrm.Sdk.Query;

namespace Defra.Lp.WastePermits.Workflows
{


    /// </summary>    
    public class GetValidPermitApplication: WorkFlowActivityBase
    {



        /// <summary>
        /// Executes the WorkFlow.
        /// </summary>
        /// <param name="crmWorkflowContext">The <see cref="LocalWorkflowContext"/> which contains the
        /// <param name="executionContext" > <see cref="CodeActivityContext"/>
        /// </param>       
        /// <remarks>
        /// For improved performance, Microsoft Dynamics 365 caches WorkFlow instances.
        /// The WorkFlow's Execute method should be written to be stateless as the constructor
        /// is not called for every invocation of the WorkFlow. Also, multiple system threads
        /// could execute the WorkFlow at the same time. All per invocation state information
        /// is stored in the context. This means that you should not use global variables in WorkFlows.
        /// </remarks>
        /// 
        //Property for Entity defra_permit
        [Input("Permit")]
        [ReferenceTarget("defra_permit")]
        [RequiredArgument]
        public InArgument<EntityReference> GetPermit { get; set; }

        [Output("IsActiveapplicationPermit")]
        public OutArgument<string> GetIsActiveApplicationPemrit { get; set; }

        public override void ExecuteCRMWorkFlowActivity(CodeActivityContext executionContext, LocalWorkflowContext crmWorkflowContext)
        {
            var result = "False";

            var permitId = GetPermit.Get<EntityReference>(executionContext).Id;
            

            var appFetchXml = @"<fetch >
                  <entity name='defra_application'>
                    <attribute name='defra_applicationid' />
                    <attribute name='createdon' />
                    <order attribute='createdon' descending='true' />
                    <filter type='and'>
                    <condition attribute='statuscode' operator='eq' value='910400007' />                     
                    <condition attribute='defra_permitid' operator='eq'  uitype='defra_permit' value='{" + permitId.ToString() +@"}' />
                    </filter>
                  </entity>
                </fetch>";

            var tracingService = executionContext.GetExtension<ITracingService>();
            var service = crmWorkflowContext.OrganizationService;
            var context = crmWorkflowContext.WorkflowExecutionContext;

            var currecntAppId = context.PrimaryEntityId;

            var app= service.RetrieveMultiple(new FetchExpression(appFetchXml)).Entities.FirstOrDefault();

            if(app.Id.Equals(currecntAppId))
            {
                result = "True";
            }

            GetIsActiveApplicationPemrit.Set(executionContext, result);

	        

        }
         

    }

}
