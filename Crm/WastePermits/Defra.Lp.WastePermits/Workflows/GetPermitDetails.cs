
// <copyright file="GetPermitDetailsForApplication.cs" company="">
// Copyright (c) 2018 All Rights Reserved
// </copyright>
// <author></author>
// <date>3/5/2018 8:36:50 AM</date>
// <summary>Implements the GetPermitDetailsForApplication Plugin.</summary>
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.1
// </auto-generated>
using Core.Helpers.Extensions;
using Microsoft.Xrm.Sdk;
using Microsoft.Xrm.Sdk.Messages;
using Microsoft.Xrm.Sdk.Query;
using Microsoft.Xrm.Sdk.Workflow;
using System;
using System.Activities;
using WastePermits.DataAccess;
using WastePermits.Model.EarlyBound;

namespace Defra.Lp.WastePermits.Workflows
{  
    public class GetPermitDetails: WorkFlowActivityBase
    {
        #region Properties 
        //Property for Entity defra_application
        [Input("Application")]
        [ReferenceTarget("defra_application")]
        public InArgument<EntityReference> Application { get; set; }

        [Input("Permit")]
        [ReferenceTarget("defra_permit")]
        public InArgument<EntityReference> Permit { get; set; }

        [Output("Return data")]
        public OutArgument<string> ReturnData { get; set; }

        private ITracingService TracingService { get; set; }
        private IWorkflowContext Context { get; set; }
        private IOrganizationService Service { get; set; }
        #endregion

        /// <summary>
        /// Executes the WorkFlow.
        /// </summary>
        /// <param name="crmWorkflowContext">The <see cref="WorkFlowActivityBase.LocalWorkflowContext"/> which contains the
        /// <param name="executionContext" > <see cref="CodeActivityContext"/>
        /// </param>       
        /// <remarks>
        /// For improved performance, Microsoft Dynamics 365 caches WorkFlow instances.
        /// The WorkFlow's Execute method should be written to be stateless as the constructor
        /// is not called for every invocation of the WorkFlow. Also, multiple system threads
        /// could execute the WorkFlow at the same time. All per invocation state information
        /// is stored in the context. This means that you should not use global variables in WorkFlows.
        /// </remarks>
        public override void ExecuteCRMWorkFlowActivity(CodeActivityContext executionContext, LocalWorkflowContext crmWorkflowContext)
        {

            if (crmWorkflowContext == null)
            {
                throw new ArgumentNullException("crmWorkflowContext");
            }

            TracingService = executionContext.GetExtension<ITracingService>();
            Service = crmWorkflowContext.OrganizationService;
            Context = crmWorkflowContext.WorkflowExecutionContext;

            var application = Application.Get(executionContext);
            var permit = Permit.Get(executionContext);
            if (application == null && permit == null) return;

            string returnData;
            if (application != null)
            {
                TracingService.Trace("Getting Standard Rules for application: {0}", application.Id.ToString());
                // returnData = Service.GetStandardRules(application);

                returnData = GetListOfAllActivitiesGivenApplication(Service, executionContext, application.Id.ToString());
            }
            else
            {
                TracingService.Trace("Getting Standard Rules for permit: {0}", permit.Id.ToString());
                //returnData = Service.GetStandardRules(permit, defra_permit.EntityLogicalName, defra_permit.Fields.defra_permitId, defra_permit_lines.EntityLogicalName);
                returnData = GetListOfAllActivitiesGivenPermit(Service,executionContext,permit.Id.ToString());
            }

            ReturnData.Set(executionContext, returnData);
            TracingService.Trace("Returning data: {0}", returnData);
        }

        public string GetListOfAllActivitiesGivenApplication(IOrganizationService service, CodeActivityContext context, string appId)
        {

            var fetchXml = @"<fetch >
                  <entity name='defra_applicationline'>
                    <attribute name='defra_applicationlineid' />
                    <attribute name='defra_name' />
                    <attribute name='defra_standardruleid' />
                    <attribute name='defra_linetype' />
                    <attribute name='defra_itemid' />
                    <attribute name='defra_item_type' />
                    <attribute name='defra_value' />
                    <order attribute='defra_value' descending='true' />
                    <filter type='and'>
                      <condition attribute='defra_applicationid' operator='eq'  uitype='defra_application' value='{" + appId + @"}' />
                     <condition attribute='statecode' value='0' operator='eq'/>
                    </filter>
                    <link-entity name='defra_item' from='defra_itemid' to='defra_itemid' link-type='outer' alias='item'>
                      <attribute name='defra_code' />
                          <attribute name='defra_name' />
                            <attribute name='defra_itemtypeid' />
                      
                    </link-entity>
                    <link-entity name='defra_standardrule' from='defra_standardruleid' to='defra_standardruleid' visible='false' link-type='outer' alias='standardrule'>
                      <attribute name='defra_rulesnamegovuk' />
                        <attribute name='defra_name' />

                    </link-entity>
                  </entity>
                </fetch>";

            RetrieveMultipleRequest fetchRequest = new RetrieveMultipleRequest
            {
                Query = new FetchExpression(fetchXml)
            };

            var results = ((RetrieveMultipleResponse)service.Execute(fetchRequest)).EntityCollection;
            var aliasItem = "item";
            var aliasSr = "standardrule";
            var nonSrCodeList = "";
            var srCodeList = "";
            var returnData = string.Empty;

            if (results != null && results.Entities.Count > 0)
            {
                for (int i = 0; i < results.Entities.Count; i++)
                {
                    if (results[i].Contains(defra_standardrule.Fields.defra_standardruleId))
                    {
                        var code = results[i].GetAliasedAttributeText($"{aliasSr}.{defra_standardrule.Fields.defra_name}");
                        var name = results[i].GetAliasedAttributeText($"{aliasSr}.{defra_standardrule.Fields.defra_rulesnamegovuk}");
                        var permit = $"{code} - {name}";
                        returnData = (i == 0) ? returnData + permit : returnData + "; " + permit;
                    }
                    // Only activities for non SR
                    else if (results[i].Contains(defra_item.Fields.defra_itemId) && (results[i].Contains("item.defra_itemtypeid") && (results[i].GetAliasedAttributeId("item.defra_itemtypeid") == System.Guid.Parse("493f0abd-34d9-e811-a96e-000d3a23443b"))))
                    {

                        var code = results[i].GetAliasedAttributeText($"{aliasItem}.{defra_item.Fields.defra_code}");
                        var name = results[i].GetAliasedAttributeText($"{aliasItem}.{defra_item.Fields.defra_name}");

                        var permit = $"{code} - {name}";
                        returnData = (i == 0) ? returnData + permit : returnData + "; " + permit;

                    }

                }
            }
            return returnData;

        }

        public string GetListOfAllActivitiesGivenPermit(IOrganizationService service, CodeActivityContext context, string permitId)
        {

            var fetchXml = @"<fetch >
                  <entity name='defra_permit_lines'>
                  
                    <attribute name='defra_name' />
                    <attribute name='defra_standardruleid' />
                    <attribute name='defra_itemid' />                                    
                    <filter type='and'>
                     <condition attribute='statecode' value='0' operator='eq'/>
                    <condition attribute='defra_permitid' operator='eq'  uitype='defra_permit' value='{" + permitId + @"}' />
                    </filter>
                    <link-entity name='defra_item' from='defra_itemid' to='defra_itemid' link-type='outer' alias='item'>
                      <attribute name='defra_code' />
                          <attribute name='defra_name' />
                            <attribute name='defra_itemtypeid' />
                      
                    </link-entity>
                    <link-entity name='defra_standardrule' from='defra_standardruleid' to='defra_standardruleid' visible='false' link-type='outer' alias='standardrule'>
                      <attribute name='defra_rulesnamegovuk' />
                        <attribute name='defra_name' />

                    </link-entity>
                  </entity>
                </fetch>";

            RetrieveMultipleRequest fetchRequest = new RetrieveMultipleRequest
            {
                Query = new FetchExpression(fetchXml)
            };

            var results = ((RetrieveMultipleResponse)service.Execute(fetchRequest)).EntityCollection;
            var aliasItem = "item";
            var aliasSr = "standardrule";
            var nonSrCodeList = "";
            var srCodeList = "";
            var returnData = string.Empty;

            if (results != null && results.Entities.Count > 0)
            {
                for (int i = 0; i < results.Entities.Count; i++)
                {
                    if (results[i].Contains(defra_standardrule.Fields.defra_standardruleId))
                    {
                        var code = results[i].GetAliasedAttributeText($"{aliasSr}.{defra_standardrule.Fields.defra_name}");
                        var name = results[i].GetAliasedAttributeText($"{aliasSr}.{defra_standardrule.Fields.defra_rulesnamegovuk}");
                        var permit = $"{code} - {name}";
                        returnData = (i == 0) ? returnData + permit : returnData + "; " + permit;
                    }
                    // Only activities for non SR
                    else if (results[i].Contains(defra_item.Fields.defra_itemId) && (results[i].Contains("item.defra_itemtypeid") && (results[i].GetAliasedAttributeId("item.defra_itemtypeid") == System.Guid.Parse("493f0abd-34d9-e811-a96e-000d3a23443b"))))
                    {

                        var code = results[i].GetAliasedAttributeText($"{aliasItem}.{defra_item.Fields.defra_code}");
                        var name = results[i].GetAliasedAttributeText($"{aliasItem}.{defra_item.Fields.defra_name}");

                        var permit = $"{code} - {name}";
                        returnData = (i == 0) ? returnData + permit : returnData + "; " + permit;

                    }

                }
            }
            return returnData;

        }

    }
}