// <copyright file="ApplicationLineCreateWasteParams.cs" company="">
// Copyright (c) 2017 All Rights Reserved
// </copyright>
// <author></author>
// <date>10/13/2017 10:54:51 AM</date>
// <summary>Implements the ApplicationLineCreateWasteParams Plugin.</summary>
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.1
// </auto-generated>

using System;
using System.ServiceModel;
using Microsoft.Xrm.Sdk;
using Microsoft.Xrm.Sdk.Query;
using System.Collections.Generic;

namespace Defra.Lp.WastePermits.Plugins
{

    /// <summary>
    /// ApplicationLineCreateWasteParams Plugin.
    /// </summary>    
    public class ApplicationLineCreateWasteParams : PluginBase
    {

        private ITracingService TracingService { get; set; }
        private IPluginExecutionContext Context { get; set; }
        private IOrganizationService Service { get; set; }
        /// <summary>
        /// Alias of the image registered for the snapshot of the
        /// primary entity's attributes before the core platform operation executes.
        /// The image contains the following attributes:
        /// No Attributes
        /// </summary>
        private const string PreImageAlias = "preImg";

        Dictionary<string, string> paramMapping = new Dictionary<string, string>
            {
                { "defra_siteplanrequired", "defra_adequatesiteplan" },
            {"defra_siteconditionreport","defra_siteconditionreportadequate" },
            { "defra_techcompetenceevreq","defra_evidenceoftechnicalabilityadequate" }

            };

        /// Initializes a new instance of the <see cref="ApplicationLineCreateWasteParams"/> class.
        /// </summary>
        /// <param name="unsecure">Contains public (unsecured) configuration information.</param>
        /// <param name="secure">Contains non-public (secured) configuration information. 
        /// When using Microsoft Dynamics 365 for Outlook with Offline Access, 
        /// the secure string is not passed to a plug-in that executes while the client is offline.</param>
        public ApplicationLineCreateWasteParams(string unsecure, string secure)
            : base(typeof(ApplicationLineCreateWasteParams))
        {

            // TODO: Implement your custom configuration handling.

        }


        /// <summary>
        /// Main entry point for he business logic that the plug-in is to execute.
        /// </summary>
        /// <param name="localContext">The <see cref="LocalPluginContext"/> which contains the
        /// <see cref="IPluginExecutionContext"/>,
        /// <see cref="IOrganizationService"/>
        /// and <see cref="ITracingService"/>
        /// </param>
        /// <remarks>
        /// For improved performance, Microsoft Dynamics 365 caches plug-in instances.
        /// The plug-in's Execute method should be written to be stateless as the constructor
        /// is not called for every invocation of the plug-in. Also, multiple system threads
        /// could execute the plug-in at the same time. All per invocation state information
        /// is stored in the context. This means that you should not use global variables in plug-ins.
        /// </remarks>
        protected override void ExecuteCrmPlugin(LocalPluginContext localContext)
        {
            if (localContext == null)
            {
                throw new InvalidPluginExecutionException("localContext");
            }


            TracingService = localContext.TracingService;
            Context = localContext.PluginExecutionContext;
            Service = localContext.OrganizationService;



            // TODO: Implement your custom Plug-in business logic.
            if (Context.MessageName == "Update")
            {
                Entity preImageEntity = (Context.PreEntityImages != null &&
                              Context.PreEntityImages.Contains(PreImageAlias))
                                 ? Context.PreEntityImages[PreImageAlias]
                                 : null;

                TracingService.Trace("Test 1");
                EntityReference paramsLookup = preImageEntity.GetAttributeValue<EntityReference>("defra_parametersid");

                TracingService.Trace("Test 2");
                if (paramsLookup == null)
                {
                    return;
                }
                else
                {
                    TracingService.Trace("Test 3");
                    var paramsID = paramsLookup.Id;
                    Entity wasteParamEntity = Service.Retrieve("defra_wasteparams", paramsID, new ColumnSet(true));

                    TracingService.Trace("Test 4");

                    if (preImageEntity.Attributes.Contains("defra_applicationid"))
                    {

                        TracingService.Trace("Test 5");
                        EntityReference applicationLookup = (EntityReference)preImageEntity.Attributes["defra_applicationid"];

                        var applicationID = applicationLookup.Id;
                        TracingService.Trace("Test " + applicationLookup);
                        TracingService.Trace("App id" + applicationLookup.Id);
                        

                        Entity applicationEntity = Service.Retrieve("defra_application",
                           applicationID, new ColumnSet("defra_dulymadechecklistid"));

                        TracingService.Trace("Test 6");
                        EntityReference dulymadeLookup = (EntityReference)applicationEntity.Attributes["defra_dulymadechecklistid"];

                        var dulymadeID = dulymadeLookup.Id;

                        TracingService.Trace("Parameter lookup " + paramsID);
                        TracingService.Trace("Application lookup " + applicationID);
                        TracingService.Trace("Duly made ID " + dulymadeID);
                        foreach (var attribute in paramMapping.Keys)
                        {
                            if (attribute.Equals(0))
                            {
                                 
                            }
                        }



                    }
                }





            }

            if (Context.InputParameters.Contains("Target") && Context.InputParameters["Target"] is Entity)
            {

                Entity entity = (Entity)Context.InputParameters["Target"];

                if (entity.LogicalName == "defra_applicationline")
                {
                    //Check if the standard rule id is null

                    if (!entity.Attributes.Contains("defra_standardruleid") || entity.Attributes["defra_standardruleid"] == null)
                    {
                        return;
                    }
                    else
                    {
                        EntityReference standardRule = (EntityReference)entity.Attributes["defra_standardruleid"];
                        var standardRuleid = standardRule.Id;

                        TracingService.Trace("Guid is: " + standardRuleid);

                        Entity standardRuleEntity = new Entity("defra_standardrule");

                        ColumnSet srAttribute = new ColumnSet(new string[] { "defra_wasteparametersid" });

                        standardRuleEntity = Service.Retrieve(standardRuleEntity.LogicalName, standardRuleid, srAttribute);

                        EntityReference wasteparam = (EntityReference)standardRuleEntity["defra_wasteparametersid"];
                        var wasteParamid = wasteparam.Id;

                        TracingService.Trace("Param guid is:" + wasteParamid);


                        Entity wasteParamEntity = Service.Retrieve("defra_wasteparams", wasteParamid, new ColumnSet(true));



                        Entity newWasteParams = new Entity("defra_wasteparams");
                        foreach (string attribute in wasteParamEntity.Attributes.Keys)
                        {
                            if (attribute != ("defra_wasteparamsid"))
                            {
                                if (attribute.Contains("_"))
                                {

                                    TracingService.Trace("Attribute of source record:" + wasteParamEntity[attribute]);
                                    newWasteParams[attribute] = wasteParamEntity[attribute];
                                    TracingService.Trace("Attribute of new record:" + newWasteParams[attribute]);
                                }
                            }

                        }

                        newWasteParams["defra_name"] = "Application Completion";
                        TracingService.Trace("Name set to application completion ");
                        Guid newWasteParamsGuid = Service.Create(newWasteParams);
                        TracingService.Trace("New waste params created " + newWasteParamsGuid);
                        entity["defra_parametersid"] = new EntityReference("defra_wasteparams", newWasteParamsGuid);




                    }
                }
            }
        }


    }
}

