// <copyright file="ApplicationLineCreateWasteParams.cs" company="">
// Copyright (c) 2017 All Rights Reserved
// </copyright>
// <author></author>
// <date>10/13/2017 10:54:51 AM</date>
// <summary>Implements the ApplicationLineCreateWasteParams Plugin.</summary>
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.1
// </auto-generated>

using System;
using System.ServiceModel;
using Microsoft.Xrm.Sdk;
using Microsoft.Xrm.Sdk.Query;
using System.Collections.Generic;

namespace Defra.Lp.WastePermits.Plugins
{
    /// <summary>
    /// ApplicationLineCreateWasteParams Plugin.
    /// </summary>    
    public class ApplicationLineCreateWasteParams : PluginBase
    {

        private ITracingService TracingService { get; set; }
        private IPluginExecutionContext Context { get; set; }
        private IOrganizationService Service { get; set; }
        /// <summary>
        /// Alias of the image registered for the snapshot of the
        /// primary entity's attributes before the core platform operation executes.
        /// The image contains the following attributes:
        /// No Attributes
        /// </summary>
        private const string PreImageAlias = "preImg";

        //Waste Parameters Entity used in multiple methods
        private Entity WasteParameters { get; set; }

        Dictionary<string, string> paramMapping = new Dictionary<string, string> {
            { "defra_siteplanrequired", "defra_adequatesiteplan" },
            { "defra_siteconditionreport","defra_adequatesiteconditionreport" },
            { "defra_techcompetenceevreq","defra_adequatetechnicalability" },
        };

        /// Initializes a new instance of the <see cref="ApplicationLineCreateWasteParams"/> class.
        /// </summary>
        /// <param name="unsecure">Contains public (unsecured) configuration information.</param>
        /// <param name="secure">Contains non-public (secured) configuration information. 
        /// When using Microsoft Dynamics 365 for Outlook with Offline Access, 
        /// the secure string is not passed to a plug-in that executes while the client is offline.</param>
        public ApplicationLineCreateWasteParams(string unsecure, string secure)
            : base(typeof(ApplicationLineCreateWasteParams))
        {

            // TODO: Implement your custom configuration handling.

        }


        /// <summary>
        /// Main entry point for he business logic that the plug-in is to execute.
        /// </summary>
        /// <param name="localContext">The <see cref="LocalPluginContext"/> which contains the
        /// <see cref="IPluginExecutionContext"/>,
        /// <see cref="IOrganizationService"/>
        /// and <see cref="ITracingService"/>
        /// </param>
        /// <remarks>
        /// For improved performance, Microsoft Dynamics 365 caches plug-in instances.
        /// The plug-in's Execute method should be written to be stateless as the constructor
        /// is not called for every invocation of the plug-in. Also, multiple system threads
        /// could execute the plug-in at the same time. All per invocation state information
        /// is stored in the context. This means that you should not use global variables in plug-ins.
        /// </remarks>
        protected override void ExecuteCrmPlugin(LocalPluginContext localContext)
        {
            if (localContext == null)
            {
                throw new InvalidPluginExecutionException("localContext");
            }

            TracingService = localContext.TracingService;
            Context = localContext.PluginExecutionContext;
            Service = localContext.OrganizationService;

            // TODO: Implement your custom Plug-in business logic.

            //The pre Image 
            Entity preImageEntity = (Context.PreEntityImages != null && Context.PreEntityImages.Contains(PreImageAlias))
                    ? Context.PreEntityImages[PreImageAlias] : null;


            if (Context.InputParameters.Contains("Target") && Context.InputParameters["Target"] is Entity)
            {
                Entity targetAppLine = (Entity)Context.InputParameters["Target"];

                //Run only if Application Line
                if (targetAppLine.LogicalName == "defra_applicationline")
                {
                    //Run only if the standard rule is updated
                    if (targetAppLine.Attributes.Contains("defra_standardruleid"))
                        //Create the Parameters record based on the Standard Rule Parameteres record
                        this.CrateApplicationLineParameters(Context, targetAppLine, preImageEntity);

                    //Create the Duly Made record (if bespoke it will only create the record if it does not exist
                    this.UpdateDulyMadeChecklist(Context, targetAppLine, preImageEntity);
                }
            }
        }

        /// <summary>
        /// Create the Parameters record based on the Standard Rule Parameteres record
        /// </summary>
        private void CrateApplicationLineParameters(IPluginExecutionContext context, Entity targetAppLine, Entity preImage)
        {
            //Check if the standard rule id is null
            EntityReference standardRuleER = null;

            if (context.MessageName == "Update" && preImage != null && preImage.Attributes.Contains("defra_standardruleid"))
                standardRuleER = (EntityReference)preImage["defra_standardruleid"];
            if (targetAppLine.Attributes.Contains("defra_standardruleid"))
                standardRuleER = (EntityReference)targetAppLine["defra_standardruleid"];

            //Standard rule is not null (created or updated)
            if (standardRuleER != null)
            {
                TracingService.Trace("Retrieving a Standard Rule with Id: " + standardRuleER.Id);
                Entity standardRuleEntity = Service.Retrieve(standardRuleER.LogicalName, standardRuleER.Id, new ColumnSet("defra_wasteparametersid"));

                //If the Waste parameters is not null on the standard rule
                if (standardRuleEntity.Attributes.Contains("defra_wasteparametersid") && standardRuleEntity.Attributes["defra_wasteparametersid"] != null)
                {
                    //Retrieve the Waste Parameter record from the standard rule
                    EntityReference wasteparam = (EntityReference)standardRuleEntity["defra_wasteparametersid"];

                    TracingService.Trace("Retrieving Waste Parameters record with Id: {0}", wasteparam.Id);
                    Entity wasteParamEntity = Service.Retrieve(wasteparam.LogicalName, wasteparam.Id, new ColumnSet(true));

                    //Create the new Waste Parameters record
                    this.WasteParameters = new Entity("defra_wasteparams");
                    foreach (string attribute in wasteParamEntity.Attributes.Keys)
                        if (attribute != ("defra_wasteparamsid") && attribute.Contains("_"))
                        {
                            TracingService.Trace("Attribute of source record:" + wasteParamEntity[attribute]);
                            this.WasteParameters[attribute] = wasteParamEntity[attribute];
                            TracingService.Trace("Attribute of new record:" + this.WasteParameters[attribute]);
                        }

                    //Set the name
                    this.WasteParameters["defra_name"] = "Application Completion";
                    TracingService.Trace("Name set to application completion ");

                    TracingService.Trace("Create new waste params record");
                    this.WasteParameters.Id = Service.Create(this.WasteParameters);
                    TracingService.Trace("New waste params created " + this.WasteParameters.Id);

                    //Update the Parameters lookup with the newly created record - Add the newly created record to the target entity
                    targetAppLine["defra_parametersid"] = this.WasteParameters.ToEntityReference();
                }
            }
        }

        /// <summary>
        /// Creates a Duly Made Checklist based on the Parameters. Updates it if exists
        /// </summary>
        private void UpdateDulyMadeChecklist(IPluginExecutionContext context, Entity targetAppLine, Entity preImage)
        {
            //Get the Application
            EntityReference applicationER = null;

            if (context.MessageName == "Update" && preImage != null && preImage.Attributes.Contains("defra_applicationid"))
                applicationER = (EntityReference)preImage["defra_applicationid"];
            if (targetAppLine.Attributes.Contains("defra_applicationid"))
                applicationER = (EntityReference)targetAppLine["defra_applicationid"];

            //Check if the Duly Made record exists. If not create it
            if (applicationER == null)
                return;

            //Create the duly made entity object
            Entity dulyMade = new Entity("defra_dulymadechecklist") { Id = Guid.Empty };

            //Retrieve the duly made record if exists
            TracingService.Trace("Application with Id {0} is being retrieved", applicationER.Id);
            Entity applicationEntity = Service.Retrieve(applicationER.LogicalName, applicationER.Id, new ColumnSet("defra_dulymadechecklistid", "defra_applicationnumber"));

            if (applicationEntity.Attributes.Contains("defra_dulymadechecklistid") && applicationEntity["defra_dulymadechecklistid"] != null)
            {
                EntityReference appER = (EntityReference)applicationEntity["defra_dulymadechecklistid"];
                dulyMade = new Entity(appER.LogicalName, appER.Id) { Id = appER.Id };
                TracingService.Trace("Duly Made record with ID {0} has been found", dulyMade.Id);
            }

            TracingService.Trace("Preparing the duly made record parameters based on the line parameters");
            if (this.WasteParameters != null && this.WasteParameters.Attributes.Count > 0)
                foreach (var mappingAtt in paramMapping)
                    if (this.WasteParameters.Attributes.Contains(mappingAtt.Key) && (bool)this.WasteParameters[mappingAtt.Key] == true)
                        //Set the Duly made check to No (the check to be performed) if the Parameter is Yes (customer input)
                        dulyMade.Attributes.Add(mappingAtt.Value, new OptionSetValue(910400001));

            TracingService.Trace("Creating the duly made record if it doesnt exist");
            if (dulyMade.Id == Guid.Empty)
            {
                //Populate the Application lookup
                dulyMade.Attributes.Add("defra_applicationid", applicationER);

                TracingService.Trace("Creating duly made record");
                //Create the duly made record
                dulyMade.Attributes.Add("defra_name", (applicationEntity.Attributes.Contains("defra_applicationnumber") && applicationEntity["defra_applicationnumber"] != null) ? string.Format("Duly Made Checklist {0}", applicationEntity["defra_applicationnumber"]) : "Duly Made Checklist");
                dulyMade.Id = Service.Create(dulyMade);

                TracingService.Trace("Updating the application duly made lookup");
                //Update the application duly made checklist lkp
                Entity updatedApp = new Entity(applicationEntity.LogicalName) { Id = applicationEntity.Id };
                updatedApp.Attributes.Add("defra_dulymadechecklistid", new EntityReference(dulyMade.LogicalName, dulyMade.Id));
                Service.Update(updatedApp);
            }
            else
                //Update only if a checks are added
                if (dulyMade.Attributes.Count > 0)
            {
                TracingService.Trace("Updating the duly made record");
                Service.Update(dulyMade);
            }
        }
    }
}