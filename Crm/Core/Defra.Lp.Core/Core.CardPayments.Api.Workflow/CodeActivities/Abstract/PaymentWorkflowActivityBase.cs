// <copyright file="CompaniesHouseValidation.cs" company="">
// Copyright (c) 2017 All Rights Reserved
// </copyright>
// <author></author>
// <date>12/4/2017 12:00:54 PM</date>
// <summary>Implements the CompaniesHouseValidation Plugin.</summary>
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.1
// </auto-generated>

using System;
using System.Activities;
using System.Collections.Generic;
using System.Net;
using CardPayments;
using CardPayments.Model;
using Core.Configuration;
using Defra.Lp.Core.CardPayments.Workflow.Constants;
using Microsoft.Xrm.Sdk;
using Microsoft.Xrm.Sdk.Workflow;

namespace Defra.Lp.Core.CardPayments.Workflow.CodeActivities.Abstract
{

    /// </summary>    
    public class PaymentWorkflowActivityBase : WorkFlowActivityBase
    { 
        // Input Parameters

        [Input("Configuration Prefix")]
        public InArgument<string> ConfigurationPrefix { get; set; }

        // Output Parameters

        [RequiredArgument]
        [Output("PaymentId")]
        public OutArgument<string> PaymentId { get; set; }

        [RequiredArgument]
        [Output("PaymentStatus")]
        public OutArgument<string> PaymentStatus { get; set; }

        [Output("PaymentFinished")]
        public OutArgument<bool> PaymentFinished { get; set; }

        [RequiredArgument]
        [Output("PaymentNextUrlHref")]
        public OutArgument<string> PaymentNextUrlHref { get; set; }

        [Output("PaymentNextUrlMethod")]
        public OutArgument<string> PaymentNextUrlMethod { get; set; }

        [Output("PaymentCancelUrlHref")]
        public OutArgument<string> PaymentCancelUrlHref { get; set; }

        [Output("PaymentCancelUrlMethod")]
        public OutArgument<string> PaymentCancelUrlMethod { get; set; }

        [Output("PaymentProvider")]
        public OutArgument<string> PaymentProvider { get; set; }

        protected void PrepareOutputParameters(CodeActivityContext executionContext, BasePaymentResponse apiResponse, ITracingService tracingService)
        {
            tracingService.Trace("PrepareOutputParameters()");
            tracingService.Trace("PrepareOutputParameters() status = {0}", apiResponse.state?.status);
            PaymentStatus.Set(executionContext, apiResponse.state?.status);
            tracingService.Trace("PrepareOutputParameters() payment_id = {0}", apiResponse.payment_id);
            PaymentId.Set(executionContext, apiResponse.payment_id);
            tracingService.Trace("PrepareOutputParameters() finished = {0}", apiResponse.state?.finished);
            PaymentFinished.Set(executionContext, apiResponse.state?.finished);
            tracingService.Trace("PrepareOutputParameters() apiResponse._links?.next_url.href) = {0}", apiResponse._links?.next_url?.href);
            PaymentNextUrlHref.Set(executionContext, apiResponse._links?.next_url?.href);
            tracingService.Trace("PrepareOutputParameters() apiResponse._links?.next_url.method = {0}", apiResponse._links?.next_url?.method);
            PaymentNextUrlMethod.Set(executionContext, apiResponse._links?.next_url?.method);
            tracingService.Trace("PrepareOutputParameters() cancel.href = {0}", apiResponse._links?.cancel?.href);
            PaymentCancelUrlHref.Set(executionContext, apiResponse._links?.cancel?.href);
            tracingService.Trace("PrepareOutputParameters() cancel.method = {0}", apiResponse._links?.cancel?.method);
            PaymentCancelUrlMethod.Set(executionContext, apiResponse._links?.cancel?.method);
            tracingService.Trace("PrepareOutputParameters() payment_provider = {0}", apiResponse.payment_provider);
            PaymentProvider.Set(executionContext, apiResponse.payment_provider);
        }

        protected RestServiceConfiguration RetrieveCardPaymentServiceConfiguration(IOrganizationService organizationService, string configurationPrefix)
        {
            if (string.IsNullOrWhiteSpace(configurationPrefix))
            {
                configurationPrefix = String.Empty;
            }

            // Read the settings
            IDictionary<string, string> configSettings = organizationService.GetConfigurationStringValues(
                 $"{configurationPrefix}{CardPaymentServiceSecureConfigurationKeys.ApiKey}",
                 $"{configurationPrefix}{CardPaymentServiceSecureConfigurationKeys.TargetUrl}",
                 $"{configurationPrefix}{CardPaymentServiceSecureConfigurationKeys.TargetHost}",
                 $"{configurationPrefix}{CardPaymentServiceSecureConfigurationKeys.SecurityProtocol}",
                 $"{configurationPrefix}{CardPaymentServiceSecureConfigurationKeys.SecurityHeader}");

            // Parse the settings
            SecurityProtocolType protocolType;
            Enum.TryParse(
                configSettings[$"{configurationPrefix}{CardPaymentServiceSecureConfigurationKeys.SecurityProtocol}"],
                out protocolType);

            RestServiceConfiguration config = new RestServiceConfiguration
            {
                ApiKey = configSettings[$"{configurationPrefix}{CardPaymentServiceSecureConfigurationKeys.ApiKey}"],
                SecurityHeader = configSettings[$"{configurationPrefix}{CardPaymentServiceSecureConfigurationKeys.SecurityHeader}"],
                SecurityProtocol = protocolType,
                TargetHost = configSettings[$"{configurationPrefix}{CardPaymentServiceSecureConfigurationKeys.TargetHost}"],
                TargetUrl = configSettings[$"{configurationPrefix}{CardPaymentServiceSecureConfigurationKeys.TargetUrl}"]
            };
            return config;
        }
    }
}