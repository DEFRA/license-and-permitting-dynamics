// <copyright file="MoveNextStage.cs" company="">
// Copyright (c) 2017 All Rights Reserved
// </copyright>
// <author></author>
// <date>12/21/2017 11:37:53 AM</date>
// <summary>Implements the MoveNextStage Plugin.</summary>
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.1
// </auto-generated>
using Microsoft.Crm.Sdk.Messages;
using Microsoft.Xrm.Sdk;
using Microsoft.Xrm.Sdk.Query;
using System;
using System.Activities;

namespace Defra.Lp.Workflows
{
    /// </summary>    
    public class MoveNextStage: WorkFlowActivityBase
    {
        /// <summary>
        /// Executes the WorkFlow.
        /// </summary>
        /// <param name="crmWorkflowContext">The <see cref="LocalWorkflowContext"/> which contains the
        /// <param name="executionContext" > <see cref="CodeActivityContext"/>
        /// </param>       
        /// <remarks>
        /// For improved performance, Microsoft Dynamics 365 caches WorkFlow instances.
        /// The WorkFlow's Execute method should be written to be stateless as the constructor
        /// is not called for every invocation of the WorkFlow. Also, multiple system threads
        /// could execute the WorkFlow at the same time. All per invocation state information
        /// is stored in the context. This means that you should not use global variables in WorkFlows.
        /// </remarks>
        public override void ExecuteCRMWorkFlowActivity(CodeActivityContext executionContext, LocalWorkflowContext crmWorkflowContext)
        {                 

            if (crmWorkflowContext == null)
            {
                throw new ArgumentNullException("crmWorkflowContext");
            }

            //var processName = this.ProcessName.Get<string>(executionContext);
            //var stageName = this.StageName.Get<string>(executionContext);
            //if (string.IsNullOrWhiteSpace(processName) || string.IsNullOrWhiteSpace(stageName)) return;

            var tracingService = executionContext.GetExtension<ITracingService>();
            var service = crmWorkflowContext.OrganizationService;
            var ctx = crmWorkflowContext.WorkflowExecutionContext;

            //tracingService.Trace(string.Format("Moving {0} to Stage {1}", processName, stageName));

            try
	        {
                // Get the active Business Process Flow Instance
                var processInstanceReq = new Microsoft.Crm.Sdk.Messages.RetrieveProcessInstancesRequest
                {
                    EntityId = ctx.PrimaryEntityId,
                    EntityLogicalName = ctx.PrimaryEntityName
                };
                var processInstanceResp = (RetrieveProcessInstancesResponse)service.Execute(processInstanceReq);
                Entity activeProcessInstance = null;
                if (processInstanceResp != null && processInstanceResp.Processes.Entities.Count > 0)
                {
                    // First record is the active process instance
                    activeProcessInstance = processInstanceResp.Processes.Entities[0];
                }

                // Get the active Business Process Stage
                var activeStageId = new Guid(activeProcessInstance.Attributes["processstageid"].ToString());
                //var activeProcessName = (string)activeProcessInstance.Attributes["processstageid"];

                tracingService.Trace(string.Format("Got active process instance id={1} with stage id={0}", activeProcessInstance.Attributes["processstageid"].ToString(), activeProcessInstance.Id.ToString()));

                // Retrieve the process stages in the active path of the current process instance
                var pathReq = new RetrieveActivePathRequest
                {
                    ProcessInstanceId = activeProcessInstance.Id
                };
                var pathResp = (RetrieveActivePathResponse)service.Execute(pathReq);

                //tracingService.Trace("Retrieved stages in the active path of the process instance:");

                //int activeStagePosition = 0;
                //var activeStageName = string.Empty;
                //for (int i = 0; i < pathResp.ProcessStages.Entities.Count; i++)
                //{
                //    tracingService.Trace(string.Format("Stage {0}: {1} (StageId: {2})", i + 1,
                //                            pathResp.ProcessStages.Entities[i].Attributes["stagename"],
                //                            pathResp.ProcessStages.Entities[i].Attributes["processstageid"]));

                //    // Retrieve the active stage name and active stage position based on the activeStageId for the process instance
                //    if (pathResp.ProcessStages.Entities[i].Attributes["processstageid"].ToString() == activeStageId.ToString())
                //    {
                //        activeStageName = pathResp.ProcessStages.Entities[i].Attributes["stagename"].ToString();
                //        activeStagePosition = i;
                //    }
                //}

                //// Display the active stage name and Id
                //tracingService.Trace(string.Format("Active stage for the process instance: {0} (StageID: {1})", activeStageName, activeStageId));

                //// Retrieve the stage ID of the next stage that you want to set as active
                //var nextStageId = (Guid)pathResp.ProcessStages.Entities[activeStagePosition + 1].Attributes["processstageid"];

                //// Retrieve the process instance record to update its active stage
                //var cols1 = new ColumnSet();
                //cols1.AddColumn("activestageid");
                //var retrievedProcessInstance = service.Retrieve("processstage", activeProcessInstance.Id, cols1);

                //// Set the next stage as the active stage
                //retrievedProcessInstance["activestageid"] = new EntityReference(pathResp.ProcessStages.Entities[activeStagePosition + 1].LogicalName, nextStageId);
                //service.Update(retrievedProcessInstance);
            }
            catch (Exception ex)
            {
                tracingService.Trace(string.Format("ERROR. Move Next Stage Activity: {0} {1}", ex.Message, ex.StackTrace));
                throw new InvalidPluginExecutionException("An error occured while moving to next stage. Please ask an administrator for further actions.");
            }	  
        }
    }
}