
// <copyright file="GetActiveCaseCount.cs" company="">
// Copyright (c) 2018 All Rights Reserved
// </copyright>
// <author></author>
// <date>6/22/2018 6:26:14 PM</date>
// <summary>Implements the GetActiveCaseCount Plugin.</summary>
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.1
// </auto-generated>
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Globalization;
using System.Linq;
using System.Text;
using System.ServiceModel;
using System.Threading.Tasks;
using System.Activities;
using Microsoft.Xrm.Sdk;
using Microsoft.Xrm.Sdk.Workflow;
using System.Runtime.Serialization;
using Lp.DataAccess;

namespace Defra.Lp.Workflows
{
    using System;
    using System.Activities;
    using Microsoft.Xrm.Sdk;
    using Microsoft.Xrm.Sdk.Workflow;


    /// </summary>    
    public class GetActiveCaseCount : WorkFlowActivityBase
    {
        [RequiredArgument]
        [Input("Application")]
        [ReferenceTarget("defra_application")]
        public InArgument<EntityReference> Application { get; set; }

        [RequiredArgument]
        [Input("Case Types to count")]
        [Default("910400000;910400001")]
        public InArgument<string> CaseTypes { get; set; }

        [RequiredArgument]
        [Output("Count")]
        public OutArgument<int> Count { get; set; }

        /// <summary>
        /// Executes the activity
        /// </summary>
        /// <param name="executionContext">Activity context</param>
        /// <param name="crmWorkflowContext">Includes organisation service</param>
        public override void ExecuteCRMWorkFlowActivity(CodeActivityContext executionContext, LocalWorkflowContext crmWorkflowContext)
        {
            // 1. Validate
            if (crmWorkflowContext == null)
            {
                throw new ArgumentNullException(nameof(crmWorkflowContext));
            }

            // 2. Count lines
            var tracingService = executionContext.GetExtension<ITracingService>();
            var service = crmWorkflowContext.OrganizationService;

            var application = Application.Get(executionContext);
            if (application == null) return;

            var caseTypes = CaseTypes.Get(executionContext);
            if (string.IsNullOrWhiteSpace(caseTypes)) return;

            var count = service.CountActiveCasesOfType(application.Id, caseTypes);

            // 3. Return Result
            Count.Set(executionContext, count);
            tracingService.Trace("Count = {0}", count);
        }


    }

}
