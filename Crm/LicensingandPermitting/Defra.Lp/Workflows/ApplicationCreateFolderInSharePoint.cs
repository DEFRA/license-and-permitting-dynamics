
// <copyright file="ApplicationCreateFolderInSharePoint.cs" company="">
// Copyright (c) 2017 All Rights Reserved
// </copyright>
// <author></author>
// <date>10/6/2017 4:49:48 PM</date>
// <summary>Implements the ApplicationCreateFolderInSharePoint Plugin.</summary>
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.1
// </auto-generated>
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Globalization;
using System.Linq;
using System.Text;
using System.ServiceModel;
using System.Threading.Tasks;
using System.Activities;
using Microsoft.Xrm.Sdk;
using Microsoft.Xrm.Sdk.Workflow;
using System.Runtime.Serialization;

namespace Defra.Lp.Workflows
{


    /// </summary>    
    public class ApplicationCreateFolderInSharePoint: WorkFlowActivityBase
    {

         
        #region Properties 
        //Property for Entity defra_application
        [RequiredArgument]
        [Input("Application")] 
        [ReferenceTarget("defra_application")]
        public InArgument<EntityReference> Application { get; set; }
        #endregion
        

        /// <summary>
        /// Executes the WorkFlow.
        /// </summary>
        /// <param name="crmWorkflowContext">The <see cref="LocalWorkflowContext"/> which contains the
        /// <param name="executionContext" > <see cref="CodeActivityContext"/>
        /// </param>       
        /// <remarks>
        /// For improved performance, Microsoft Dynamics 365 caches WorkFlow instances.
        /// The WorkFlow's Execute method should be written to be stateless as the constructor
        /// is not called for every invocation of the WorkFlow. Also, multiple system threads
        /// could execute the WorkFlow at the same time. All per invocation state information
        /// is stored in the context. This means that you should not use global variables in WorkFlows.
        /// </remarks>
        public override void ExecuteCRMWorkFlowActivity(CodeActivityContext executionContext, LocalWorkflowContext crmWorkflowContext)
        {                 

            if (crmWorkflowContext == null)
            {
                throw new ArgumentNullException("crmWorkflowContext");
            }

	        try
	        {
                // use the same synchronous application workflow
                // create document location record sychronously on post stage
                // Then create the folder in SharePoint asynchronously
                // This means that if the the user clicks the document location record
                // Also need to change the way configuration table works - tell Josh
                // Create document location in logic app or return relative path and create in workflow
                // Check existing document location when going to create
                // create record as a step rather than in assembly
                //
                //
                // Create application synchro 
                // create document location record which is child of permits library which attaches to another library which is application library 
                // and the relative path is the permit number
                // then asynchrously trigger to create a folder in SharePoint if it doesn't exist (logic app) with Application number
                //
                // PAss libraty name to Logic App - Permit or Application
                //
                // If fails logic app then workflow fails
                //
                // Create mnew document location record in a step if its needed - The workflow assembly will query to tell us if it exists. Don't want to do this in .NET code 

                // Document creation in Child workflow

                var service = crmWorkflowContext.OrganizationService;
            }
	        catch (FaultException<OrganizationServiceFault> e)
            {                
                // Handle the exception.
                throw e;
            }	  
        }
    }
}