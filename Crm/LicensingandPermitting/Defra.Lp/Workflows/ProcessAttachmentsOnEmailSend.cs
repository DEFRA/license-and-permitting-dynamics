
// <copyright file="ProcessAttachmentsOnEmailSend.cs" company="">
// Copyright (c) 2017 All Rights Reserved
// </copyright>
// <author></author>
// <date>11/27/2017 7:50:15 AM</date>
// <summary>Implements the ProcessAttachmentsOnEmailSend Plugin.</summary>
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.1
// </auto-generated>
using Defra.Lp.Common.SharePoint;
using Lp.DataAccess;
using Microsoft.Xrm.Sdk;
using Microsoft.Xrm.Sdk.Query;
using Microsoft.Xrm.Sdk.Workflow;
using Model.Lp.Crm;
using System;
using System.Activities;

namespace Defra.Lp.Workflows
{
    /// <summary>
    /// This code activity is used to trigger an update on the activitymimeattachment entity. 
    /// </summary>
    public class ProcessAttachmentsOnEmailSend : CodeActivity
    {
        private ITracingService TracingService { get; set; }
        private IWorkflowContext Context { get; set; }
        private IOrganizationServiceFactory ServiceFactory { get; set; }
        private IOrganizationService Service { get; set; }
        private IOrganizationService AdminService { get; set; }

        protected override void Execute(CodeActivityContext executionContext)
        {
            TracingService = executionContext.GetExtension<ITracingService>();
            Context = executionContext.GetExtension<IWorkflowContext>();
            ServiceFactory = executionContext.GetExtension<IOrganizationServiceFactory>();
            Service = ServiceFactory.CreateOrganizationService(Context.UserId);
            AdminService = ServiceFactory.CreateOrganizationService(null);

            ProcessAttachments();
        }

        private void ProcessAttachments()
        {   
            var azureInterface = new AzureInterface(AdminService, Service, TracingService);
            var results = GetAttachmentsForEmail(Context.PrimaryEntityId);

            TracingService.Trace("Requesting action for Email upload.");
            azureInterface.SendFileToSharePointActionRequest(Context.PrimaryEntityName, Context.PrimaryEntityId);

            // Call the plugin to upload the email and all its attachments as files to SharePoint. 
            if (results != null && results.Entities.Count > 0)
            {
                // Now process the attachments
                TracingService.Trace("Processing {0} attachments.", results.Entities.Count.ToString());
                foreach (Entity attachment in results.Entities)
                {
                    // Using an action because we don't know how many attachments we'll have. Could take more than process
                    // limit of 2 minutes so using action trigger async plugin.
                    azureInterface.SendFileToSharePointActionRequest(attachment.LogicalName, attachment.Id);

                    TracingService.Trace("{0} request sent for attachment with Id={1}", PluginMessages.SendFileToSharePoint, attachment.Id.ToString());
                }
            }
        }

        private EntityCollection GetAttachmentsForEmail(Guid emailId)
        {
            // Instantiate QueryExpression QEactivitymimeattachment
            var QEactivitymimeattachment = new QueryExpression(ActivityMimeAttachment.EntityLogicalName);

            // Add columns to activitymimeattachment
            QEactivitymimeattachment.ColumnSet.AddColumns(ActivityMimeAttachment.Id);

            // Add link-entity for Email
            var QEactivitymimeattachment_email = QEactivitymimeattachment.AddLink(Email.EntityLogicalName, ActivityMimeAttachment.ObjectId, Email.ActivityId);
            QEactivitymimeattachment_email.EntityAlias = "email";

            // Define filter. Only want attachments for one specific email
            QEactivitymimeattachment_email.LinkCriteria.AddCondition(Email.ActivityId, ConditionOperator.Equal, emailId);

            return Service.RetrieveMultiple(QEactivitymimeattachment);
        }
    }
}