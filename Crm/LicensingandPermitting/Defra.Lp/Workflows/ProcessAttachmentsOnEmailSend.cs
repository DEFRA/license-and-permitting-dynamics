
// <copyright file="ProcessAttachmentsOnEmailSend.cs" company="">
// Copyright (c) 2017 All Rights Reserved
// </copyright>
// <author></author>
// <date>11/27/2017 7:50:15 AM</date>
// <summary>Implements the ProcessAttachmentsOnEmailSend Plugin.</summary>
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.1
// </auto-generated>
using Defra.Lp.Common.SharePoint;
using Lp.DataAccess;
using Microsoft.Xrm.Sdk;
using Microsoft.Xrm.Sdk.Workflow;
using Model.Lp.Crm;
using System;
using System.Activities;

namespace Defra.Lp.Workflows
{
    /// <summary>
    /// This code activity is used to trigger an update on the activitymimeattachment entity. 
    /// </summary>
    public class ProcessAttachmentsOnEmailSend : CodeActivity
    {
        private ITracingService TracingService { get; set; }
        private IWorkflowContext Context { get; set; }
        private IOrganizationServiceFactory ServiceFactory { get; set; }
        private IOrganizationService Service { get; set; }
        private IOrganizationService AdminService { get; set; }

        protected override void Execute(CodeActivityContext executionContext)
        {
            TracingService = executionContext.GetExtension<ITracingService>();
            Context = executionContext.GetExtension<IWorkflowContext>();
            ServiceFactory = executionContext.GetExtension<IOrganizationServiceFactory>();
            Service = ServiceFactory.CreateOrganizationService(Context.UserId);
            AdminService = ServiceFactory.CreateOrganizationService(null);

            ProcessAttachments();
        }

        private void ProcessAttachments()
        {   
            var azureInterface = new AzureInterface(AdminService, Service, TracingService);
            var results = Query.QueryCRMForMultipleRecords(Service, ReturnAttachmentsFetchXML(Context.PrimaryEntityId));

            // Upload the actual email as a file to SharePoint. Parent entity is an Application for outbound emails.
            // Assume we are only sending emails from Application to begin with ...
            //
            // Do we need to check the regarding here?
            //
            //if (Context.PrimaryEntityName == Application.EntityLogicalName)
            //{
                TracingService.Trace("Uploading email message");
                azureInterface.UploadFile(new EntityReference(Context.PrimaryEntityName, Context.PrimaryEntityId), Application.EntityLogicalName, "defra_applicationid");

                // Now process the attachments
                TracingService.Trace("Processing {0} attachments.", results.Entities.Count.ToString());
                foreach (Entity attachment in results.Entities)
                {
                    // Using an action because we don't know how many attachments we'll have. Could take more than process
                    // limit of 2 minutes so using action trigger async plugin.
                    var actionRequest = new OrganizationRequest(PluginMessages.SendFileToSharePoint)
                    {
                        [PluginInputParams.TargetEntityName] = attachment.LogicalName,
                        [PluginInputParams.TargetEntityId] = attachment.Id.ToString()
                    };
                    var actionResponse = Service.Execute(actionRequest);

                    TracingService.Trace("{0} request sent for attachment with Id={1}", PluginMessages.SendFileToSharePoint, attachment.Id.ToString());
                }
            //}
        }

        private string ReturnAttachmentsFetchXML(Guid emailId)
        {
            return string.Format(@"<fetch>
                                    <entity name='activitymimeattachment' >
                                    <link-entity name='email' from='activityid' to='objectid' link-type='inner' alias='email' >
                                        <filter>
                                        <condition attribute='activityid' operator='eq' value='{0}' />
                                        </filter>
                                    </link-entity>
                                    </entity>
                                </fetch>", emailId);
        }
    }
}