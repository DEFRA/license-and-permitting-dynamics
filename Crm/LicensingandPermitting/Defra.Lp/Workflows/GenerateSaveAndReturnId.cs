
// <copyright file="GenerateSaveAndReturnId.cs" company="">
// Copyright (c) 2018 All Rights Reserved
// </copyright>
// <author></author>
// <date>3/29/2018 3:16:53 PM</date>
// <summary>Implements the GenerateSaveAndReturnId Plugin.</summary>
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.1
// </auto-generated>
using System;
using System.Activities;
using Microsoft.Xrm.Sdk;
using Microsoft.Xrm.Sdk.Workflow;

namespace Defra.Lp.Workflows
{
    /// </summary>    
    public class GenerateSaveAndReturnId: WorkFlowActivityBase
    {
        [Output("Save and Return Id")]
        public OutArgument<string> SaveAndReturnId { get; set; }

        /// <summary>
        /// Executes the WorkFlow.
        /// </summary>
        /// <param name="crmWorkflowContext">The <see cref="LocalWorkflowContext"/> which contains the
        /// <param name="executionContext" > <see cref="CodeActivityContext"/>
        /// </param>       
        /// <remarks>
        /// For improved performance, Microsoft Dynamics 365 caches WorkFlow instances.
        /// The WorkFlow's Execute method should be written to be stateless as the constructor
        /// is not called for every invocation of the WorkFlow. Also, multiple system threads
        /// could execute the WorkFlow at the same time. All per invocation state information
        /// is stored in the context. This means that you should not use global variables in WorkFlows.
        /// </remarks>
        public override void ExecuteCRMWorkFlowActivity(CodeActivityContext executionContext, LocalWorkflowContext crmWorkflowContext)
        {

            if (executionContext == null)
                throw new ArgumentNullException(nameof(executionContext));

            var tracingService = executionContext.GetExtension<ITracingService>();

            var returnString = Guid.NewGuid().ToString("N");

            tracingService.Trace("SaveAndReturnId = '{0}'", returnString);
            SaveAndReturnId.Set(executionContext, returnString);
        }
    }
}