
// <copyright file="GetApplicationDetails.cs" company="">
// Copyright (c) 2018 All Rights Reserved
// </copyright>
// <author></author>
// <date>2/26/2018 3:54:45 PM</date>
// <summary>Implements the GetApplicationDetails Plugin.</summary>
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.1
// </auto-generated>
using System;
using System.ServiceModel;
using System.Activities;
using Microsoft.Xrm.Sdk;
using Microsoft.Xrm.Sdk.Workflow;
using Defra.Lp.Common;

namespace Defra.Lp.Workflows
{
    /// </summary>    
    public class GetApplicationDetails: WorkFlowActivityBase
    {
        #region Properties 
        //Property for Entity defra_application
        [RequiredArgument]
        [Input("Application")]
        [ReferenceTarget("defra_application")]
        public InArgument<EntityReference> Application { get; set; }

        [RequiredArgument]
        [Input("Type of information to requested")]
        [Default("Company Registered Address")]
        public InArgument<string> RequestedInfo { get; set; }

        [Output("Return data")]
        public OutArgument<string> ReturnData { get; set; }

        private ITracingService TracingService { get; set; }
        private IWorkflowContext Context { get; set; }
        private IOrganizationService Service { get; set; }
        #endregion

        /// <summary>
        /// Executes the WorkFlow.
        /// </summary>
        /// <param name="crmWorkflowContext">The <see cref="LocalWorkflowContext"/> which contains the
        /// <param name="executionContext" > <see cref="CodeActivityContext"/>
        /// </param>       
        /// <remarks>
        /// For improved performance, Microsoft Dynamics 365 caches WorkFlow instances.
        /// The WorkFlow's Execute method should be written to be stateless as the constructor
        /// is not called for every invocation of the WorkFlow. Also, multiple system threads
        /// could execute the WorkFlow at the same time. All per invocation state information
        /// is stored in the context. This means that you should not use global variables in WorkFlows.
        /// </remarks>
        public override void ExecuteCRMWorkFlowActivity(CodeActivityContext executionContext, LocalWorkflowContext crmWorkflowContext)
        {

            if (crmWorkflowContext == null)
            {
                throw new ArgumentNullException("crmWorkflowContext");
            }

            TracingService = executionContext.GetExtension<ITracingService>();
            Service = crmWorkflowContext.OrganizationService;
            Context = crmWorkflowContext.WorkflowExecutionContext;

            var application = this.Application.Get(executionContext);
            if (application == null) return;

            var requestedInfo = this.RequestedInfo.Get(executionContext);
            if (String.IsNullOrWhiteSpace(requestedInfo)) return;

            TracingService.Trace("Getting {0} for application: {1}", requestedInfo, application.Id.ToString());

            try
            {
                string returnData = null;
                switch (requestedInfo)
                {
                    case "Company Registered Address":
                        returnData = GetCompanyAddress(application, "910400005");
                        break;
                    case "Company Secretary Email Address":
                        returnData = GetContactDetailsForApplication(application, "910400006");
                        break;
                    case "Site Name and Address":
                        returnData = GetSiteDetailsForApplication(application);
                        break;
                }
                if (!string.IsNullOrEmpty(returnData))
                {
                    this.ReturnData.Set(executionContext, returnData);
                    TracingService.Trace("Returning data: {0}", returnData);
                }
            }
            catch (FaultException<OrganizationServiceFault> e)
            {
                // Handle the exception.
                throw e;
            }
        }

        private string GetCompanyAddress(EntityReference application, string addressType)
        {
            var fetchXml = string.Format(@"<fetch top='1' >
                                              <entity name='defra_application' >
                                                <filter type='and' >
                                                  <condition attribute='defra_applicationid' operator='eq' value='{0}' />
                                                </filter>
                                                <link-entity name='account' from='accountid' to='defra_customerid' >
                                                  <link-entity name='defra_addressdetails' from='defra_customer' to='accountid' >
                                                    <filter name='defra_addressdetails' from='defra_customer' to='accountid' >
                                                      <condition attribute='defra_addresstype' operator='eq' value='{1}' />
                                                    </filter>
                                                    <link-entity name='defra_address' from='defra_addressid' to='defra_address' alias='address' >
                                                      <attribute name='defra_street' />
                                                      <attribute name='defra_name' />
                                                      <attribute name='defra_postcode' />
                                                      <attribute name='defra_locality' />
                                                      <attribute name='defra_premises' />
                                                      <attribute name='defra_towntext' />
                                                    </link-entity>
                                                  </link-entity>
                                                </link-entity>
                                              </entity>
                                            </fetch>", application.Id.ToString(), addressType);
            var entity = Query.QueryCRMForSingleEntity(Service, fetchXml);
            if (entity == null)
            {
                return string.Empty;
            }
            else
            {
                var premises = (string)entity.GetAttributeValue<AliasedValue>("address.defra_premises").Value;
                var street = (string)entity.GetAttributeValue<AliasedValue>("address.defra_street").Value;
                street = (string.IsNullOrEmpty(street)) ? street : Environment.NewLine + street;
                var locality = (string)entity.GetAttributeValue<AliasedValue>("address.defra_locality").Value;
                locality = (string.IsNullOrEmpty(locality)) ? locality : Environment.NewLine + locality;
                var town = (string)entity.GetAttributeValue<AliasedValue>("address.defra_towntext").Value;
                town = (string.IsNullOrEmpty(town)) ? town : Environment.NewLine + town;
                var postcode = (string)entity.GetAttributeValue<AliasedValue>("address.defra_postcode").Value;
                postcode = (string.IsNullOrEmpty(postcode)) ? postcode : Environment.NewLine + postcode;
                return premises + street + locality + town + postcode;
            }
        }

        private string GetContactDetailsForApplication(EntityReference application, string addressType)
        {
            var fetchXml = string.Format(@"<fetch top='1' >
                                            <entity name='defra_application' >
                                            <filter>
                                                <condition attribute='defra_applicationid' operator='eq' value='{0}' />
                                            </filter>
                                            <link-entity name='defra_addressdetails' from='defra_applicationid' to='defra_applicationid' >
                                                <attribute name='emailaddress' />
                                                <filter>
                                                <condition attribute='defra_addresstype' operator='eq' value='{1}' />
                                                </filter>
                                            </link-entity>
                                            </entity>
                                        </fetch>", application.Id.ToString(), addressType);
            var entity = Query.QueryCRMForSingleEntity(Service, fetchXml);
            if (entity == null)
            {
                return string.Empty;
            }
            return string.Empty;
        }

        private string GetSiteDetailsForApplication(EntityReference application)
        {
            var fetchXml = string.Format(@"<fetch top='1' >
                                              <entity name='defra_application' >
                                                <filter>
                                                  <condition attribute='defra_applicationid' operator='eq' value='{0}' />
                                                </filter>
                                                <link-entity name='defra_location' from='defra_applicationid' to='defra_applicationid' alias='location'>
                                                  <attribute name='defra_name' />
                                                  <link-entity name='defra_locationdetails' from='defra_locationid' to='defra_locationid' >
                                                    <link-entity name='defra_address' from='defra_addressid' to='defra_addressid' alias='address' >
                                                      <attribute name='defra_street' />
                                                      <attribute name='defra_name' />
                                                      <attribute name='defra_postcode' />
                                                      <attribute name='defra_locality' />
                                                      <attribute name='defra_premises' />
                                                      <attribute name='defra_towntext' />
                                                    </link-entity>
                                                  </link-entity>
                                                </link-entity>
                                              </entity>
                                            </fetch>", application.Id.ToString());
            var entity = Query.QueryCRMForSingleEntity(Service, fetchXml);
            if (entity == null)
            {
                return string.Empty;
            }
            else
            {
                var siteName = (string)entity.GetAttributeValue<AliasedValue>("location.defra_name").Value;
                var siteAddress = (string)entity.GetAttributeValue<AliasedValue>("address.defra_name").Value;
                return siteName + ", " + siteAddress;
            }
        }
    }
}