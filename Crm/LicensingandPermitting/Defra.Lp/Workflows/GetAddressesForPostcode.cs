
// <copyright file="GetAddressesForPostcode.cs" company="">
// Copyright (c) 2017 All Rights Reserved
// </copyright>
// <author></author>
// <date>10/11/2017 11:51:02 AM</date>
// <summary>Implements the GetAddressesForPostcode Plugin.</summary>
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.1
// </auto-generated>
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Globalization;
using System.Linq;
using System.Text;
using System.ServiceModel;
using System.Threading.Tasks;
using System.Activities;
using Microsoft.Xrm.Sdk;
using Microsoft.Xrm.Sdk.Workflow;
using System.Runtime.Serialization;
using System.Net.Http;
using System.Net.Http.Headers;

namespace Defra.Lp.Workflows
{


    /// </summary>    
    public class GetAddressesForPostcode: WorkFlowActivityBase
    {

        

        /// <summary>
        /// Executes the WorkFlow.
        /// </summary>
        /// <param name="crmWorkflowContext">The <see cref="LocalWorkflowContext"/> which contains the
        /// <param name="executionContext" > <see cref="CodeActivityContext"/>
        /// </param>       
        /// <remarks>
        /// For improved performance, Microsoft Dynamics 365 caches WorkFlow instances.
        /// The WorkFlow's Execute method should be written to be stateless as the constructor
        /// is not called for every invocation of the WorkFlow. Also, multiple system threads
        /// could execute the WorkFlow at the same time. All per invocation state information
        /// is stored in the context. This means that you should not use global variables in WorkFlows.
        /// </remarks>
        public override void ExecuteCRMWorkFlowActivity(CodeActivityContext executionContext, LocalWorkflowContext crmWorkflowContext)
        {                 

            if (crmWorkflowContext == null)
            {
                throw new ArgumentNullException("crmWorkflowContext");
            }

            try
	        {
                var tracingService = executionContext.GetExtension<ITracingService>();
                var service = crmWorkflowContext.OrganizationService;
                var postcode = this.Postcode.Get(executionContext);

                // ToDo: Get the parameter from the configuration table ...

                tracingService.Trace(string.Format("In GetAddressesForPostcode with PostCode = {0}", postcode));

                var url = string.Format("http://addressfacade.cloudapp.net/address-service/v1/addresses/postcode?key=client1&postcode={0}", postcode);
                var addresses = string.Empty;
                using (HttpClient httpclient = new HttpClient())
                {
                    HttpResponseMessage response = httpclient.GetAsync(url).Result;
                    response.Content.Headers.ContentType = new MediaTypeHeaderValue("application/json");
                    response.EnsureSuccessStatusCode();
                    addresses = response.Content.ReadAsStringAsync().Result;
                }

                tracingService.Trace(string.Format("Returned addresses: {0}", addresses));

                this.Addresses.Set(executionContext, addresses);
            }
	        catch (FaultException<OrganizationServiceFault> e)
            {                
                // Handle the exception.
                throw e;
            }	  
        }

        [RequiredArgument]
        [Input("Postcode")]
        public InArgument<string> Postcode { get; set; }

        [Output("Addresses")]
        public OutArgument<string> Addresses { get; set; }
    }
}