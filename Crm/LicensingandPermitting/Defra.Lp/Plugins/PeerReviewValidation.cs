// <copyright file="PeerReviewValidation.cs" company="">
// Copyright (c) 2017 All Rights Reserved
// </copyright>
// <author></author>
// <date>12/1/2017 11:22:59 AM</date>
// <summary>Implements the PeerReviewValidation Plugin.</summary>
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.1
// </auto-generated>

using System;
using System.ServiceModel;
using Microsoft.Xrm.Sdk;

namespace Defra.Lp.Plugins
{

    /// <summary>
    /// PeerReviewValidation Plugin.
    /// </summary>    
    public class PeerReviewValidation: PluginBase
    {

        private const string preImageAlias = "preImage";

        /// <summary>
        /// Initializes a new instance of the <see cref="PeerReviewValidation"/> class.
        /// </summary>
        /// <param name="unsecure">Contains public (unsecured) configuration information.</param>
        /// <param name="secure">Contains non-public (secured) configuration information. 
        /// When using Microsoft Dynamics 365 for Outlook with Offline Access, 
        /// the secure string is not passed to a plug-in that executes while the client is offline.</param>
        public PeerReviewValidation(string unsecure, string secure)
            : base(typeof(PeerReviewValidation))
        {

            // TODO: Implement your custom configuration handling.
        }

        /// <summary>
        /// Main entry point for he business logic that the plug-in is to execute.
        /// </summary>
        /// <param name="localContext">The <see cref="LocalPluginContext"/> which contains the
        /// <see cref="IPluginExecutionContext"/>,
        /// <see cref="IOrganizationService"/>
        /// and <see cref="ITracingService"/>
        /// </param>
        /// <remarks>
        /// For improved performance, Microsoft Dynamics 365 caches plug-in instances.
        /// The plug-in's Execute method should be written to be stateless as the constructor
        /// is not called for every invocation of the plug-in. Also, multiple system threads
        /// could execute the plug-in at the same time. All per invocation state information
        /// is stored in the context. This means that you should not use global variables in plug-ins.
        /// </remarks>
        protected override void ExecuteCrmPlugin(LocalPluginContext localContext)
        {
            if (localContext == null)
            {
                throw new InvalidPluginExecutionException("localContext");
            }

            IPluginExecutionContext context = localContext.PluginExecutionContext;
            ITracingService tracing = localContext.TracingService;

            if (context.PrimaryEntityName == "defra_application" && context.InputParameters.Contains("Target") && context.InputParameters["Target"] is Entity && context.PreEntityImages.Contains(preImageAlias))
            {
                Entity preImage = (Entity)context.PreEntityImages[preImageAlias];
                Entity target = (Entity)context.InputParameters["Target"];

                //When the reviewer is populated
                //if (target.Attributes.Contains("defra_reviewerid") && target.Attributes["defra_reviewerid"] != null)
                //    target["statuscode"] = new OptionSetValue(910400005);


                if (target.Contains("defra_permittingteamleadersignoff") && (bool)target["defra_permittingteamleadersignoff"])
                    target["defra_permittingteamleaderid"] = new EntityReference("systemuser", context.UserId);

                EntityReference determinedBy = (EntityReference)preImage.Attributes["ownerid"];
                if (target.Attributes.Contains("ownerid"))
                    determinedBy = (EntityReference)target["ownerid"];

                if (preImage.Attributes.Contains("defra_determinedbyid"))
                    determinedBy = (EntityReference)preImage.Attributes["defra_determinedbyid"];
                if (target.Attributes.Contains("defra_determinedbyid"))
                    determinedBy = (EntityReference)target["defra_determinedbyid"];

                EntityReference peerReviewer = null;

                if (preImage.Attributes.Contains("defra_reviewerid"))
                    peerReviewer = (EntityReference)preImage.Attributes["defra_reviewerid"];
                if (target.Attributes.Contains("defra_reviewerid"))
                    peerReviewer = (EntityReference)target["defra_reviewerid"];

                if (peerReviewer != null && peerReviewer.Id == determinedBy.Id)
                {

                    tracing.Trace(string.Format("peerReviewer: {0} - determinedBy: {1}", peerReviewer.Name, determinedBy.Name));
                    throw new InvalidPluginExecutionException("The peer reviewer cannot be the same as the permitting officer!");
                }
                EntityReference teamleaderid = null;
                if (preImage.Attributes.Contains("defra_permittingteamleaderid"))
                    teamleaderid = (EntityReference)preImage.Attributes["defra_permittingteamleaderid"];
                if (target.Attributes.Contains("defra_permittingteamleaderid"))
                    teamleaderid = (EntityReference)target["defra_permittingteamleaderid"];

                if (teamleaderid != null && teamleaderid.Id == determinedBy.Id)
                {

                    tracing.Trace(string.Format("peerReviewer: {0} - determinedBy: {1}", peerReviewer.Name, determinedBy.Name));
                    throw new InvalidPluginExecutionException("The team leader signing off the application cannot be the same as the permitting officer!");
                }

                //commented by Kassim Hassan to implement WE-2476 
                //if (peerReviewer != null && teamleaderid != null && peerReviewer.Id == teamleaderid.Id)
                //    throw new InvalidPluginExecutionException("The team leader signing off the application cannot be the same as the peer reviewer!");
            }
        }
    }
}