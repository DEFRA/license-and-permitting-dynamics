// <copyright file="SendSingleAttachmentToLogicApp.cs" company="">
// Copyright (c) 2017 All Rights Reserved
// </copyright>
// <author></author>
// <date>9/8/2017 5:57:03 PM</date>
// <summary>Implements the SendSingleAttachmentToLogicApp Plugin.</summary>
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.1
// </auto-generated>

using System;
using System.ServiceModel;
using Microsoft.Xrm.Sdk;
using Defra.Lp.Common;

namespace Defra.Lp.Plugins
{

    /// <summary>
    /// SendSingleAttachmentToLogicApp Plugin.
    /// </summary>    
    public class SendSingleAttachmentToLogicApp : PluginBase
    {
        private ITracingService TracingService { get; set; }
        private IPluginExecutionContext Context { get; set; }
        private IOrganizationServiceFactory ServiceFactory { get; set; }
        private IOrganizationService Service { get; set; }
        private IOrganizationService AdminService { get; set; }

        //private IPluginExecutionContext _context;
        //private IOrganizationService _service;
        //private ITracingService _tracingService;
        //private Entity _applicationLine;

        /// <summary>
        /// Initializes a new instance of the <see cref="SendSingleAttachmentToLogicApp"/> class.
        /// </summary>
        /// <param name="unsecure">Contains public (unsecured) configuration information.</param>
        /// <param name="secure">Contains non-public (secured) configuration information. 
        /// When using Microsoft Dynamics 365 for Outlook with Offline Access, 
        /// the secure string is not passed to a plug-in that executes while the client is offline.</param>
        public SendSingleAttachmentToLogicApp(string unsecure, string secure)
            : base(typeof(SendSingleAttachmentToLogicApp))
        {

            // TODO: Implement your custom configuration handling.
        }


        /// <summary>
        /// Main entry point for he business logic that the plug-in is to execute.
        /// </summary>
        /// <param name="localContext">The <see cref="LocalPluginContext"/> which contains the
        /// <see cref="IPluginExecutionContext"/>,
        /// <see cref="IOrganizationService"/>
        /// and <see cref="ITracingService"/>
        /// </param>
        /// <remarks>
        /// For improved performance, Microsoft Dynamics 365 caches plug-in instances.
        /// The plug-in's Execute method should be written to be stateless as the constructor
        /// is not called for every invocation of the plug-in. Also, multiple system threads
        /// could execute the plug-in at the same time. All per invocation state information
        /// is stored in the context. This means that you should not use global variables in plug-ins.
        /// </remarks>
        protected override void ExecuteCrmPlugin(LocalPluginContext localContext)
        {
            if (localContext == null)
            {
                throw new InvalidPluginExecutionException("localContext");
            }

            TracingService = localContext.TracingService;
            Context = localContext.PluginExecutionContext;
            Service = localContext.OrganizationService;
            ServiceFactory = (IOrganizationServiceFactory)localContext.ServiceProvider.GetService(typeof(IOrganizationServiceFactory));
            AdminService = ServiceFactory.CreateOrganizationService(null);

            if (Context.InputParameters.Contains("Target") && Context.InputParameters["Target"] is Entity)
            {
                Entity entity = (Entity)Context.InputParameters["Target"];
                AzureInterface azureInterface = new AzureInterface(AdminService, Service, TracingService);
                if (entity.LogicalName == "activitymimeattachment")
                {

                    TracingService.Trace("Start of MoveFile from activitymimeattachment");
                    azureInterface.MoveFile(entity.ToEntityReference(), true, "email", "rpa_relatedmetadataid");
                    TracingService.Trace("Email Processed Successfully");
                }
                else if (entity.LogicalName == "annotation")
                {
                    TracingService.Trace("Start of MoveFile from annotation");
                    Entity PostEntityImage = Context.PostEntityImages["PostImage"];

                    TracingService.Trace("Got PostImage");

                    EntityReference Regarding = null;
                    if (PostEntityImage.Attributes.Contains("objectid"))
                    {

                        Regarding = (EntityReference)PostEntityImage.Attributes["objectid"];
                    }
                    TracingService.Trace("Parent Entity is: " + Regarding.LogicalName);


                    if (Regarding.LogicalName == "rpa_customernotification")
                    {
                        azureInterface.MoveFile(entity.ToEntityReference(), true, "rpa_customernotification", "rpa_customernotificationid");
                        TracingService.Trace("Customer Notification Processed Successfully");
                    }
                    else if (Regarding.LogicalName == "rpa_memo")
                    {
                        azureInterface.MoveFile(entity.ToEntityReference(), true, "rpa_memo", "rpa_internalnoteid");
                        TracingService.Trace("Memo Processed Successfully");
                    }
                    else if (Regarding.LogicalName == "account")
                    {
                        azureInterface.MoveFile(entity.ToEntityReference(), true, "account", "accountid");
                        TracingService.Trace("Account Note Processed Successfully");
                    }
                    else if (Regarding.LogicalName == "defra_application")
                    {
                        //azureInterface.MoveFile(entity.ToEntityReference(), true, "defra_application", "defra_applicationid");
                        TracingService.Trace("Application Note Processed Successfully");
                    }
                }
            }
        }
    }
}