// <copyright file="SendSingleAttachmentToLogicApp.cs" company="">
// Copyright (c) 2017 All Rights Reserved
// </copyright>
// <author></author>
// <date>9/8/2017 5:57:03 PM</date>
// <summary>Implements the SendSingleAttachmentToLogicApp Plugin.</summary>
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.1
// </auto-generated>

using System;
using System.ServiceModel;
using Microsoft.Xrm.Sdk;
using Defra.Lp.Common;

namespace Defra.Lp.Plugins
{

    /// <summary>
    /// SendSingleAttachmentToLogicApp Plugin.
    /// </summary>    
    public class SendSingleAttachmentToLogicApp : PluginBase
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SendSingleAttachmentToLogicApp"/> class.
        /// </summary>
        /// <param name="unsecure">Contains public (unsecured) configuration information.</param>
        /// <param name="secure">Contains non-public (secured) configuration information. 
        /// When using Microsoft Dynamics 365 for Outlook with Offline Access, 
        /// the secure string is not passed to a plug-in that executes while the client is offline.</param>
        public SendSingleAttachmentToLogicApp(string unsecure, string secure)
            : base(typeof(SendSingleAttachmentToLogicApp))
        {

            // TODO: Implement your custom configuration handling.
        }

        /// <summary>
        /// Main entry point for he business logic that the plug-in is to execute.
        /// </summary>
        /// <param name="localContext">The <see cref="LocalPluginContext"/> which contains the
        /// <see cref="IPluginExecutionContext"/>,
        /// <see cref="IOrganizationService"/>
        /// and <see cref="ITracingService"/>
        /// </param>
        /// <remarks>
        /// For improved performance, Microsoft Dynamics 365 caches plug-in instances.
        /// The plug-in's Execute method should be written to be stateless as the constructor
        /// is not called for every invocation of the plug-in. Also, multiple system threads
        /// could execute the plug-in at the same time. All per invocation state information
        /// is stored in the context. This means that you should not use global variables in plug-ins.
        /// </remarks>
        protected override void ExecuteCrmPlugin(LocalPluginContext localContext)
        {
            if (localContext == null)
            {
                throw new InvalidPluginExecutionException("localContext");
            }

            var tracingService = localContext.TracingService;
            var context = localContext.PluginExecutionContext;
            var service = localContext.OrganizationService;
            var serviceFactory = (IOrganizationServiceFactory)localContext.ServiceProvider.GetService(typeof(IOrganizationServiceFactory));
            var adminService = serviceFactory.CreateOrganizationService(null);

            if (context.InputParameters.Contains("Target") && context.InputParameters["Target"] is Entity)
            {
                var entity = (Entity)context.InputParameters["Target"];

                var config = Query.GetConfigurationEntity(adminService, "Licensing and Permitting");

                var azureInterface = new AzureInterface(config, service, tracingService);
                if (entity.LogicalName == "activitymimeattachment")
                {
                    tracingService.Trace("Start of MoveFile from activitymimeattachment");
                    //azureInterface.MoveFile(entity.ToEntityReference(), "email", "rpa_relatedmetadataid");
                    tracingService.Trace("Email Processed Successfully");
                }
                //else if (entity.LogicalName == "annotation")
                //{
                //    tracingService.Trace("Start of MoveFile from annotation");
                //    Entity PostEntityImage = context.PostEntityImages["PostImage"];

                //    tracingService.Trace("Got PostImage");

                //    EntityReference Regarding = null;
                //    if (PostEntityImage.Attributes.Contains("objectid"))
                //    {

                //        Regarding = (EntityReference)PostEntityImage.Attributes["objectid"];
                //    }
                //    tracingService.Trace("Parent Entity is: " + Regarding.LogicalName);

                //    if (Regarding.LogicalName == "account")
                //    {
                //        azureInterface.MoveFile(entity.ToEntityReference(), "account", "accountid");
                //        tracingService.Trace("Account Note Processed Successfully");
                //    }
                //    else if (Regarding.LogicalName == "defra_application")
                //    {
                //        azureInterface.MoveFile(entity.ToEntityReference(), "defra_application", "defra_applicationid");
                //        tracingService.Trace("Application Note Processed Successfully");
                //    }
                //}
            }
        }
    }
}