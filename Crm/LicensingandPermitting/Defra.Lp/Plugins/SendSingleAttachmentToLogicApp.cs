// <copyright file="SendSingleAttachmentToLogicApp.cs" company="">
// Copyright (c) 2017 All Rights Reserved
// </copyright>
// <author></author>
// <date>9/8/2017 5:57:03 PM</date>
// <summary>Implements the SendSingleAttachmentToLogicApp Plugin.</summary>
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.1
// </auto-generated>

using Defra.Lp.Common.SharePoint;
using Microsoft.Xrm.Sdk;
using Model.Lp.Crm;

namespace Defra.Lp.Plugins
{

    /// <summary>
    /// SendSingleAttachmentToLogicApp Plugin.
    /// </summary>    
    public class SendSingleAttachmentToLogicApp : PluginBase
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SendSingleAttachmentToLogicApp"/> class.
        /// </summary>
        /// <param name="unsecure">Contains public (unsecured) configuration information.</param>
        /// <param name="secure">Contains non-public (secured) configuration information. 
        /// When using Microsoft Dynamics 365 for Outlook with Offline Access, 
        /// the secure string is not passed to a plug-in that executes while the client is offline.</param>
        public SendSingleAttachmentToLogicApp(string unsecure, string secure)
            : base(typeof(SendSingleAttachmentToLogicApp))
        {
        }

        /// <summary>
        /// Main entry point for he business logic that the plug-in is to execute.
        /// </summary>
        /// <param name="localContext">The <see cref="LocalPluginContext"/> which contains the
        /// <see cref="IPluginExecutionContext"/>,
        /// <see cref="IOrganizationService"/>
        /// and <see cref="ITracingService"/>
        /// </param>
        /// <remarks>
        /// For improved performance, Microsoft Dynamics 365 caches plug-in instances.
        /// The plug-in's Execute method should be written to be stateless as the constructor
        /// is not called for every invocation of the plug-in. Also, multiple system threads
        /// could execute the plug-in at the same time. All per invocation state information
        /// is stored in the context. This means that you should not use global variables in plug-ins.
        /// </remarks>
        protected override void ExecuteCrmPlugin(LocalPluginContext localContext)
        {
            if (localContext == null)
            {
                throw new InvalidPluginExecutionException("localContext");
            }

            var tracingService = localContext.TracingService;
            var context = localContext.PluginExecutionContext;
            var service = localContext.OrganizationService;
            var serviceFactory = (IOrganizationServiceFactory)localContext.ServiceProvider.GetService(typeof(IOrganizationServiceFactory));
            var adminService = serviceFactory.CreateOrganizationService(null);

            if (context.InputParameters.Contains("Target") && context.InputParameters["Target"] is Entity)
            {
                var target = (Entity)context.InputParameters["Target"];

                var azureInterface = new AzureInterface(adminService, service, tracingService);

                // Process the attachment depending on the target entity
                if (target.LogicalName == "activitymimeattachment")
                {
                    // Triggered for email attachments
                    tracingService.Trace("Start of UploadFile from activitymimeattachment");
                    azureInterface.UploadFile(target.ToEntityReference(), "email", "defra_applicationid");
                    tracingService.Trace("Email Processed Successfully");
                }
                else if (target.LogicalName == "annotation")
                {
                    // Triggered for Notes attachments
                    tracingService.Trace("Start of UploadFile from annotation");
                    EntityReference regarding = null;

                    // Plugin triggered on Create and Update. Check execution depth
                    // to prevent recursive calls.
                    tracingService.Trace("Execution depth = {0};", context.Depth.ToString());
                    if (context.MessageName == PluginMessages.Update)
                    {
                        // For an update get the regarding from the PostImage
                        var postEntityImage = context.PostEntityImages["PostImage"];
                        tracingService.Trace("Got PostImage");
                        if (postEntityImage.Attributes.Contains("objectid"))
                        {
                            regarding = (EntityReference)postEntityImage.Attributes["objectid"];
                            tracingService.Trace("Parent Entity (update) is: " + regarding.LogicalName);
                        }
                    }
                    else if (context.MessageName == PluginMessages.Create)
                    {
                        // For a create, the regarding is in the Target
                        if (target.Attributes.Contains("objectid"))
                        {
                            regarding = (EntityReference)target.Attributes["objectid"];
                            tracingService.Trace("Parent Entity (create) is: " + regarding.LogicalName);
                        }
                    }

                    if (regarding != null)
                    {
                        if (regarding.LogicalName == "defra_application")
                        {
                            // Upload attachment if Note is regarding an application
                            // and there is an attachment
                            //if (target.GetAttributeValue<bool>("isdocument"))
                            string bodyAttr = (target.LogicalName == "annotation") ? "documentbody" : "body";
                            if (target.Attributes.Contains(bodyAttr) && !string.IsNullOrEmpty(target.GetAttributeValue<string>(bodyAttr)))
                            {
                                azureInterface.UploadFile(target.ToEntityReference(), "defra_application", "defra_applicationid");
                                tracingService.Trace("Application Note Processed Successfully");
                            }
                            else
                            {
                                tracingService.Trace("No file attached");
                            }
                        }
                        else
                        {
                            tracingService.Trace("Note not processed for {0}", regarding.LogicalName);
                        }
                    }
                }
            }
        }
    }
}