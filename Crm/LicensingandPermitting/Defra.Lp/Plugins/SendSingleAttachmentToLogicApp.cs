// <copyright file="SendSingleAttachmentToLogicApp.cs" company="">
// Copyright (c) 2017 All Rights Reserved
// </copyright>
// <author></author>
// <date>9/8/2017 5:57:03 PM</date>
// <summary>Implements the SendSingleAttachmentToLogicApp Plugin.</summary>
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.1
// </auto-generated>

using Defra.Lp.Common.SharePoint;
using Lp.DataAccess;
using Microsoft.Xrm.Sdk;
using Lp.Model.Crm;
using System;

namespace Defra.Lp.Plugins
{

    /// <summary>
    /// SendSingleAttachmentToLogicApp Plugin.
    /// </summary>    
    public class SendSingleAttachmentToLogicApp : PluginBase
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SendSingleAttachmentToLogicApp"/> class.
        /// </summary>
        /// <param name="unsecure">Contains public (unsecured) configuration information.</param>
        /// <param name="secure">Contains non-public (secured) configuration information. 
        /// When using Microsoft Dynamics 365 for Outlook with Offline Access, 
        /// the secure string is not passed to a plug-in that executes while the client is offline.</param>
        public SendSingleAttachmentToLogicApp(string unsecure, string secure)
            : base(typeof(SendSingleAttachmentToLogicApp))
        {
        }

        /// <summary>
        /// Main entry point for he business logic that the plug-in is to execute.
        /// </summary>
        /// <param name="localContext">The <see cref="LocalPluginContext"/> which contains the
        /// <see cref="IPluginExecutionContext"/>,
        /// <see cref="IOrganizationService"/>
        /// and <see cref="ITracingService"/>
        /// </param>
        /// <remarks>
        /// For improved performance, Microsoft Dynamics 365 caches plug-in instances.
        /// The plug-in's Execute method should be written to be stateless as the constructor
        /// is not called for every invocation of the plug-in. Also, multiple system threads
        /// could execute the plug-in at the same time. All per invocation state information
        /// is stored in the context. This means that you should not use global variables in plug-ins.
        /// </remarks>
        protected override void ExecuteCrmPlugin(LocalPluginContext localContext)
        {
            if (localContext == null)
            {
                throw new InvalidPluginExecutionException("localContext");
            }

            var tracingService = localContext.TracingService;
            var context = localContext.PluginExecutionContext;
            var service = localContext.OrganizationService;
            var serviceFactory = (IOrganizationServiceFactory)localContext.ServiceProvider.GetService(typeof(IOrganizationServiceFactory));
            var adminService = serviceFactory.CreateOrganizationService(null);

            tracingService.Trace("Message = {0}", context.MessageName);

            // If its a standard Create or Update then we should have an Entity in Target.
            EntityReference entityReference = null;
            if (context.InputParameters.Contains(PluginInputParams.Target) && context.InputParameters[PluginInputParams.Target] is Entity)
            { 
                entityReference = ((Entity)context.InputParameters[PluginInputParams.Target]).ToEntityReference();      
            }

            // If plugin is triggered from the Custom Action Message , then we have some custom input parameters. 
            if (context.InputParameters.Contains(PluginInputParams.TargetEntityName) && context.InputParameters.Contains(PluginInputParams.TargetEntityId))
            {
                entityReference = new EntityReference((string)context.InputParameters[PluginInputParams.TargetEntityName], 
                                                       new Guid((string)context.InputParameters[PluginInputParams.TargetEntityId]));
            }

            tracingService.Trace("Execution depth = {0};", context.Depth.ToString());

            if (entityReference != null)
            {
                //var entity = (Entity)context.InputParameters["Target"];
                var azureInterface = new AzureInterface(adminService, service, tracingService);

                // Process the attachment depending on the target entity
                tracingService.Trace("Start of UploadFile for entity {0}", entityReference.LogicalName);
                if (entityReference.LogicalName == ActivityMimeAttachment.EntityLogicalName)
                {
                    // Triggered for email attachments
                    azureInterface.UploadFile(entityReference);
                }
                else if (entityReference.LogicalName == Email.EntityLogicalName)
                {
                    // Triggered for emails
                    azureInterface.UploadFile(entityReference);
                }
                else if (entityReference.LogicalName == Annotation.EntityLogicalName)
                {
                    // Triggered for Notes                  
                    if (context.MessageName == PluginMessages.SendFileToSharePoint || context.MessageName == PluginMessages.Update || context.MessageName == PluginMessages.Create)
                    {
                        // Need to do a query to get the regarding object when triggered by custom action messsage. 
                        // Could use image for update but query ok as its async and keeps the code simpler and more generic.
                        var entity = Query.RetrieveDataForEntityRef(service, new string[] { Annotation.RegardingObjectId, Annotation.IsDocument }, entityReference);
                        if (entity != null)
                        {
                            var regarding = (EntityReference)entity.Attributes[Annotation.RegardingObjectId];
                            if (regarding != null)
                            {
                                tracingService.Trace("Parent Entity ({0}) is: {1}", context.MessageName, regarding.LogicalName);

                                if (regarding.LogicalName == Application.EntityLogicalName || regarding.LogicalName == Case.EntityLogicalName)
                                {
                                    // Upload attachment if Note is regarding an application or a case
                                    // and there is an attachment 
                                    //string bodyAttr = (target.LogicalName == "annotation") ? "documentbody" : "body";
                                    //if (target.Attributes.Contains(bodyAttr) && !string.IsNullOrEmpty(target.GetAttributeValue<string>(bodyAttr)))
                                    if (entity.GetAttributeValue<bool>(Annotation.IsDocument))
                                    {
                                        azureInterface.UploadFile(entityReference);
                                    }
                                    else
                                    {
                                        tracingService.Trace("No file attached. File already uploaded to SharePoint.");
                                    }
                                }
                                else
                                {
                                    tracingService.Trace("Note not processed for {0}", regarding.LogicalName);
                                }
                            }
                        }
                    }        
                }
                tracingService.Trace("{0} processed successfully", entityReference.LogicalName);
            }
            else
            {
                tracingService.Trace("No entity or entity reference found in Target");
            }
        }
    }
}