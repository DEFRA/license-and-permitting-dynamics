// <copyright file="PreOperationdefra_applicationCreate.cs" company="">
// Copyright (c) 2018 All Rights Reserved
// </copyright>
// <author></author>
// <date>3/18/2018 2:32:34 PM</date>
// <summary>Implements the PreOperationdefra_applicationCreate Plugin.</summary>
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.1
// </auto-generated>

using Common.PermitNumbering;
using Lp.DataAccess;
using Lp.Model.Crm;
using Lp.Model.EarlyBound;
using Microsoft.Xrm.Sdk;
using Microsoft.Xrm.Sdk.Query;

namespace Defra.Lp.Plugins
{

    /// <summary>
    /// PreOperationdefra_applicationCreate Plugin.
    /// </summary>    
    public class PreOperationdefra_applicationCreate : PluginBase
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PreOperationdefra_applicationCreate"/> class.
        /// </summary>
        /// <param name="unsecure">Contains public (unsecured) configuration information.</param>
        /// <param name="secure">Contains non-public (secured) configuration information. 
        /// When using Microsoft Dynamics 365 for Outlook with Offline Access, 
        /// the secure string is not passed to a plug-in that executes while the client is offline.</param>
        public PreOperationdefra_applicationCreate(string unsecure, string secure)
            : base(typeof(PreOperationdefra_applicationCreate))
        {
        }


        /// <summary>
        /// Main Code Activity Method
        /// </summary>
        /// <param name="localContext"></param>
        protected override void ExecuteCrmPlugin(LocalPluginContext localContext)
        {
            if (localContext == null)
            {
                throw new InvalidPluginExecutionException("localContext");
            }

            IOrganizationService service = localContext.OrganizationService;
            IPluginExecutionContext context = localContext.PluginExecutionContext;
            ITracingService tracing = localContext.TracingService;

            if (context.InputParameters.Contains("Target") && context.InputParameters["Target"] is Entity)
            {
                Entity target = (Entity)context.InputParameters["Target"];

                // 1. Check if we can create the application, block if parallel variations/transfer/surrenders are in progress
                ValidateApplication(target, tracing, service);

                // 2. Perform application numbering
                AutoNumberApplication(target, tracing, context, service);
            }
        }

        /// <summary>
        /// Validates the application, ensure we are able to create it
        /// </summary>
        /// <param name="target">Plugin target application</param>
        /// <param name="tracing">Tracing service</param>
        /// <param name="service">Organisation service</param>
        private static void ValidateApplication(Entity target, ITracingService tracing, IOrganizationService service)
        {
            tracing.Trace("ValidateApplication() Started");
            if (target.Attributes.Contains(Application.Permit))
            {
                tracing.Trace("Permit reference found, checking parallel applications");
                EntityReference permitEntityReference = (EntityReference) target[Application.Permit];
                if (permitEntityReference != null)
                {
                    int liveApplicationCount = DataAccessApplication.GetCountForApplicationsLinkedToPermit(
                        service,
                        permitEntityReference.Id,
                        new[]
                        {
                            defra_application_StatusCode.Issued,
                            defra_application_StatusCode.Withdrawn,
                            defra_application_StatusCode.Refused,
                            defra_application_StatusCode.Returned,
                            defra_application_StatusCode.ReturnedNotDulyMade
                        });

                    if (liveApplicationCount > 0)
                    {
                        throw new InvalidPluginExecutionException(
                            "There are other applications in progress for this permit. A new application may not be created until in-progress applications are completed or cancelled.");
                    }
                }
            }
            tracing.Trace("ValidateApplication() Complete");
        }

        /// <summary>
        /// Function performs Permit and Application AutoNumbering
        /// </summary>
        /// <param name="target">Plugin target application</param>
        /// <param name="tracing">Tracing service</param>
        /// <param name="context">Plugin context</param>
        /// <param name="service">Organisation service</param>
        private static void AutoNumberApplication(Entity target, ITracingService tracing, IPluginExecutionContext context, IOrganizationService service)
        {
            tracing.Trace("AutoNumberApplication() Started");

            if (!target.Attributes.Contains(Application.ApplicationType))
                throw new InvalidPluginExecutionException("Application Type does not contain value!");

            //Cast the Application Type
            OptionSetValue applicationType = (OptionSetValue)target[Application.ApplicationType];
            string applicationTypeStr;
            switch (applicationType.Value)
            {
                case (int)defra_ApplicationType.NewApplication: //New Application
                    applicationTypeStr = "A";
                    // New application, generate a new permit number
                    target[Application.PermitNumber] = GetPermitNumber(tracing, context, service);
                    break;

                case (int)defra_ApplicationType.Variation:
                    applicationTypeStr = "V";
                    break;

                case (int)defra_ApplicationType.Transfer:
                    applicationTypeStr = "T";

                    // Transfer, check if the permit has been set
                    string permitNumber = GetPermitNumberFromPermit(tracing, service, target);
                    if (string.IsNullOrWhiteSpace(permitNumber))
                    {
                        // This transfer request does not have a permit, e.g. partial transfer target.
                        // so generate a new permit number
                        permitNumber = GetPermitNumber(tracing, context, service);
                    }
                    target[Application.PermitNumber] = permitNumber;
                    break;

                case (int)defra_ApplicationType.Surrender:
                    applicationTypeStr = "S";
                    break;

                default:
                    applicationTypeStr = string.Empty;
                    break;
            }

            //If no permit number is specified try retrieve it from the lookup to permit. If permit number cannot be found throw an exception
            if (!target.Attributes.Contains(Application.PermitNumber))
            {
                //If only the lookup is specified
                if (target.Attributes.Contains(Application.Permit))
                {
                    // Get the permit number from the Permit itself
                    target[Application.PermitNumber] = GetPermitNumberFromPermit(tracing, service, target);
                }

                if (!target.Attributes.Contains(Application.PermitNumber))
                {
                    throw new InvalidPluginExecutionException("The application does not have valid permit number");
                }
            }

            tracing.Trace("Retrieve the next application number");
            PermitApplicationNumbering pAppAutonumbering = new PermitApplicationNumbering(context, tracing, service, (string)target[Application.PermitNumber], applicationTypeStr);
            string permitApplicationNumber = pAppAutonumbering.GetNextPermitApplicationNumber();
            tracing.Trace("Next application number {0} hes been retrieved", permitApplicationNumber);

            //Update the permit number field
            target[Application.ApplicationNumber] = permitApplicationNumber;
            target[Application.Name] = permitApplicationNumber;
            tracing.Trace("AutoNumberApplication() Application Number = {0}, Complete", permitApplicationNumber);
        }


        /// <summary>
        /// Attempts to retrieve the permit number from the linked permit record
        /// if it exists
        /// </summary>
        /// <param name="tracing"></param>
        /// <param name="service"></param>
        /// <param name="target"></param>
        /// <returns></returns>
        private static string GetPermitNumberFromPermit(ITracingService tracing, IOrganizationService service, Entity target)
        {
            tracing.Trace("GetPermitNumberFromPermit() start...");

            if (!target.Contains(Application.Permit) || target[Application.Permit] == null)
            {
                // No linked permit to this application
                return null;
            }

            string permitNumber = null;
            Entity permit = service.Retrieve(Permit.EntityLogicalName, ((EntityReference) target[Application.Permit]).Id, new ColumnSet(Permit.PermitNumber));
            if (permit.Attributes.Contains(Permit.PermitNumber) && permit.Attributes[Permit.PermitNumber] != null)
            {
                permitNumber = (string) permit.Attributes[Permit.PermitNumber];
            }
            tracing.Trace("GetPermitNumberFromPermit() = permitNumber. End.");
            return permitNumber;
        }

        private static string GetPermitNumber(ITracingService tracing, IPluginExecutionContext context,
            IOrganizationService service)
        {
            tracing.Trace("GetPermitNumber() start...");

            //Get the next permit number
            PermitNumbering permitAutoNumbering = new PermitNumbering(context, tracing, service);
            string permitNumber = permitAutoNumbering.GetNextPermitNumber();

            tracing.Trace("GetPermitNumber() Next permit number {0} hes been retrieved", permitNumber);
            return permitNumber;
        }
    }
}
